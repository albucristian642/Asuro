
RunAsuroRun.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001040  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00001040  000010d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  0080008a  0080008a  000010fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000010fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001130  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000021c4  00000000  00000000  000013e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001047  00000000  00000000  000035a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002c75  00000000  00000000  000045ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000598  00000000  00000000  00007264  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000ef50  00000000  00000000  000077fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f92  00000000  00000000  0001674c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  000176de  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002e45  00000000  00000000  00017896  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
       4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
       6:	7a c1       	rjmp	.+756    	; 0x2fc <__vector_3>
       8:	2d c1       	rjmp	.+602    	; 0x264 <__vector_4>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
      14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
      16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	9d c1       	rjmp	.+826    	; 0x358 <__vector_14>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e0 e4       	ldi	r30, 0x40	; 64
      3a:	f0 e1       	ldi	r31, 0x10	; 16
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	aa 38       	cpi	r26, 0x8A	; 138
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
      48:	20 e0       	ldi	r18, 0x00	; 0
      4a:	aa e8       	ldi	r26, 0x8A	; 138
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	aa 3c       	cpi	r26, 0xCA	; 202
      54:	b2 07       	cpc	r27, r18
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	97 d5       	rcall	.+2862   	; 0xb88 <main>
      5a:	f0 c7       	rjmp	.+4064   	; 0x103c <_exit>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <LineData>:
    tu_das ();                // rechter Sensor < 50
  \endcode
*****************************************************************************/
void  LineData (
  unsigned int  *data)
{
      5e:	cf 93       	push	r28
      60:	df 93       	push	r29
      62:	ec 01       	movw	r28, r24
  /*
     Linken Linien-Sensor lesen
  */
  data[LEFT] = ReadADC(IR_LEFT, 0);
      64:	60 e0       	ldi	r22, 0x00	; 0
      66:	70 e0       	ldi	r23, 0x00	; 0
      68:	83 e0       	ldi	r24, 0x03	; 3
      6a:	90 e0       	ldi	r25, 0x00	; 0
      6c:	0c d0       	rcall	.+24     	; 0x86 <ReadADC>
      6e:	99 83       	std	Y+1, r25	; 0x01
      70:	88 83       	st	Y, r24
  /*
     Rechten Linien-Sensor lesen
  */
  data[RIGHT] = ReadADC(IR_RIGHT, 0);
      72:	60 e0       	ldi	r22, 0x00	; 0
      74:	70 e0       	ldi	r23, 0x00	; 0
      76:	82 e0       	ldi	r24, 0x02	; 2
      78:	90 e0       	ldi	r25, 0x00	; 0
      7a:	05 d0       	rcall	.+10     	; 0x86 <ReadADC>
      7c:	9b 83       	std	Y+3, r25	; 0x03
      7e:	8a 83       	std	Y+2, r24	; 0x02
}
      80:	df 91       	pop	r29
      82:	cf 91       	pop	r28
      84:	08 95       	ret

00000086 <ReadADC>:
  \return
  10 Bit A/D Wert (Bereich 0..1023)
*****************************************************************************/

unsigned int ReadADC(unsigned int mux, unsigned int sleep)
{  
      86:	cf 93       	push	r28
      88:	df 93       	push	r29
      8a:	ec 01       	movw	r28, r24
	unsigned int adc;
	
  if (sleep)
      8c:	61 15       	cp	r22, r1
      8e:	71 05       	cpc	r23, r1
      90:	11 f0       	breq	.+4      	; 0x96 <ReadADC+0x10>
    Sleep(sleep);
      92:	86 2f       	mov	r24, r22
      94:	23 d3       	rcall	.+1606   	; 0x6dc <Sleep>

	cli();
      96:	f8 94       	cli
	adc=adcValue[mux];
      98:	cc 0f       	add	r28, r28
      9a:	dd 1f       	adc	r29, r29
      9c:	c3 55       	subi	r28, 0x53	; 83
      9e:	df 4f       	sbci	r29, 0xFF	; 255
      a0:	88 81       	ld	r24, Y
      a2:	99 81       	ldd	r25, Y+1	; 0x01
	sei();
      a4:	78 94       	sei
	
	return adc>>6;
}
      a6:	00 24       	eor	r0, r0
      a8:	88 0f       	add	r24, r24
      aa:	99 1f       	adc	r25, r25
      ac:	00 1c       	adc	r0, r0
      ae:	88 0f       	add	r24, r24
      b0:	99 1f       	adc	r25, r25
      b2:	00 1c       	adc	r0, r0
      b4:	89 2f       	mov	r24, r25
      b6:	90 2d       	mov	r25, r0
      b8:	df 91       	pop	r29
      ba:	cf 91       	pop	r28
      bc:	08 95       	ret

000000be <IsrStandard>:
      SetMotorPower(lPwm, rPwm); 
      Msleep(delta);       
   } 
} 
*****************************************************************************/ 
void IsrStandard(void) {
      be:	cf 93       	push	r28
      c0:	df 93       	push	r29
		_BV(ADLAR) | _BV(REFS0) | WHEEL_RIGHT,	// AVCC reference with external capacitor
		_BV(ADLAR) | _BV(REFS0) | WHEEL_LEFT,	// AVCC reference with external capacitor
	};
	// Vielleicht hat Rakke ja Recht: 
	// ADCL muss zuerst gelesen werden! Sonst können sich zwei Wandlungen überschneiden.
   	unsigned int sensor = ADCL | (ADCH << 8);	
      c2:	24 b1       	in	r18, 0x04	; 4
      c4:	85 b1       	in	r24, 0x05	; 5
      c6:	30 e0       	ldi	r19, 0x00	; 0
      c8:	38 2b       	or	r19, r24
	adcValue[adc_cnt]=sensor;
      ca:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <adc_cnt.2014>
      ce:	90 91 8f 00 	lds	r25, 0x008F	; 0x80008f <adc_cnt.2014+0x1>
      d2:	fc 01       	movw	r30, r24
      d4:	ee 0f       	add	r30, r30
      d6:	ff 1f       	adc	r31, r31
      d8:	e3 55       	subi	r30, 0x53	; 83
      da:	ff 4f       	sbci	r31, 0xFF	; 255
      dc:	31 83       	std	Z+1, r19	; 0x01
      de:	20 83       	st	Z, r18
	
	if(autoencode)		// Aus Kompatibilitätsgründen wird autoencode weiter benutzt
      e0:	40 91 bd 00 	lds	r20, 0x00BD	; 0x8000bd <autoencode>
      e4:	50 91 be 00 	lds	r21, 0x00BE	; 0x8000be <autoencode+0x1>
      e8:	45 2b       	or	r20, r21
      ea:	09 f4       	brne	.+2      	; 0xee <IsrStandard+0x30>
      ec:	41 c0       	rjmp	.+130    	; 0x170 <IsrStandard+0xb2>
	{
		if(adc_cnt<2) { // WHEEL_RIGHT || WHEEL_LEFT
      ee:	82 30       	cpi	r24, 0x02	; 2
      f0:	91 05       	cpc	r25, r1
      f2:	f4 f5       	brge	.+124    	; 0x170 <IsrStandard+0xb2>
	    	int s=(sensor >> 8); 
      f4:	43 2f       	mov	r20, r19
      f6:	55 27       	eor	r21, r21
		    // In avg wird ein gleitender Mittelwert mitgeführt: a(n+1) = 0.75*a(n)+0.25*s
		    avg[adc_cnt] += (s-avg[adc_cnt])>>2; 
      f8:	dc 01       	movw	r26, r24
      fa:	aa 0f       	add	r26, r26
      fc:	bb 1f       	adc	r27, r27
      fe:	ed 01       	movw	r28, r26
     100:	c6 57       	subi	r28, 0x76	; 118
     102:	df 4f       	sbci	r29, 0xFF	; 255
     104:	e8 81       	ld	r30, Y
     106:	f9 81       	ldd	r31, Y+1	; 0x01
     108:	ba 01       	movw	r22, r20
     10a:	6e 1b       	sub	r22, r30
     10c:	7f 0b       	sbc	r23, r31
     10e:	75 95       	asr	r23
     110:	67 95       	ror	r22
     112:	75 95       	asr	r23
     114:	67 95       	ror	r22
     116:	6e 0f       	add	r22, r30
     118:	7f 1f       	adc	r23, r31
     11a:	79 83       	std	Y+1, r23	; 0x01
     11c:	68 83       	st	Y, r22
		
			// Schneidet die aktuelle Sensorkurve den gleitenden Mittelwert? Konkret:
		    // Weicht der aktuelle Sensorwert um mehr als +/- 2 vom gleitenden Mittelwert ab? 
		    if (sign[adc_cnt]*(s-avg[adc_cnt]) > 2) 
     11e:	a0 5a       	subi	r26, 0xA0	; 160
     120:	bf 4f       	sbci	r27, 0xFF	; 255
     122:	ed 91       	ld	r30, X+
     124:	fc 91       	ld	r31, X
     126:	46 1b       	sub	r20, r22
     128:	57 0b       	sbc	r21, r23
     12a:	4e 9f       	mul	r20, r30
     12c:	b0 01       	movw	r22, r0
     12e:	4f 9f       	mul	r20, r31
     130:	70 0d       	add	r23, r0
     132:	5e 9f       	mul	r21, r30
     134:	70 0d       	add	r23, r0
     136:	11 24       	eor	r1, r1
     138:	63 30       	cpi	r22, 0x03	; 3
     13a:	71 05       	cpc	r23, r1
     13c:	cc f0       	brlt	.+50     	; 0x170 <IsrStandard+0xb2>
		    { 
		       // Dann zähle einen Tick weiter. 
		       // Und nächster Tick erst wieder bei -/+ 2 Abweichung vom gleitenden Mittelwert. 
		       encoder[adc_cnt^RIGHT]++; 
     13e:	dc 01       	movw	r26, r24
     140:	41 e0       	ldi	r20, 0x01	; 1
     142:	a4 27       	eor	r26, r20
     144:	aa 0f       	add	r26, r26
     146:	bb 1f       	adc	r27, r27
     148:	a1 54       	subi	r26, 0x41	; 65
     14a:	bf 4f       	sbci	r27, 0xFF	; 255
     14c:	4d 91       	ld	r20, X+
     14e:	5c 91       	ld	r21, X
     150:	11 97       	sbiw	r26, 0x01	; 1
     152:	4f 5f       	subi	r20, 0xFF	; 255
     154:	5f 4f       	sbci	r21, 0xFF	; 255
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	5c 93       	st	X, r21
     15a:	4e 93       	st	-X, r20
		       sign[adc_cnt] = -sign [adc_cnt]; 
     15c:	dc 01       	movw	r26, r24
     15e:	aa 0f       	add	r26, r26
     160:	bb 1f       	adc	r27, r27
     162:	a0 5a       	subi	r26, 0xA0	; 160
     164:	bf 4f       	sbci	r27, 0xFF	; 255
     166:	f1 95       	neg	r31
     168:	e1 95       	neg	r30
     16a:	f1 09       	sbc	r31, r1
     16c:	ed 93       	st	X+, r30
     16e:	fc 93       	st	X, r31
		    } 
		}
	}
	
	if(adc_cnt==SWITCH) {
     170:	84 30       	cpi	r24, 0x04	; 4
     172:	91 05       	cpc	r25, r1
     174:	a9 f4       	brne	.+42     	; 0x1a0 <IsrStandard+0xe2>
		switched=switched || sensor<(MY_SWITCH_THRESHHOLD<<6);	// Es wurde (ganz sicher) eine Taste gedrückt
     176:	40 91 b9 00 	lds	r20, 0x00B9	; 0x8000b9 <switched>
     17a:	50 91 ba 00 	lds	r21, 0x00BA	; 0x8000ba <switched+0x1>
     17e:	45 2b       	or	r20, r21
     180:	49 f4       	brne	.+18     	; 0x194 <IsrStandard+0xd6>
     182:	51 e0       	ldi	r21, 0x01	; 1
     184:	40 e0       	ldi	r20, 0x00	; 0
     186:	20 38       	cpi	r18, 0x80	; 128
     188:	3c 4f       	sbci	r19, 0xFC	; 252
     18a:	08 f0       	brcs	.+2      	; 0x18e <IsrStandard+0xd0>
     18c:	50 e0       	ldi	r21, 0x00	; 0
     18e:	25 2f       	mov	r18, r21
     190:	34 2f       	mov	r19, r20
     192:	02 c0       	rjmp	.+4      	; 0x198 <IsrStandard+0xda>
     194:	21 e0       	ldi	r18, 0x01	; 1
     196:	30 e0       	ldi	r19, 0x00	; 0
     198:	30 93 ba 00 	sts	0x00BA, r19	; 0x8000ba <switched+0x1>
     19c:	20 93 b9 00 	sts	0x00B9, r18	; 0x8000b9 <switched>
	}
	
	ADMUX = mux[adc_cnt];
     1a0:	fc 01       	movw	r30, r24
     1a2:	e8 59       	subi	r30, 0x98	; 152
     1a4:	ff 4f       	sbci	r31, 0xFF	; 255
     1a6:	80 81       	ld	r24, Z
     1a8:	87 b9       	out	0x07, r24	; 7
	adc_cnt=(adc_cnt+1) % sizeof(mux);
     1aa:	40 91 8e 00 	lds	r20, 0x008E	; 0x80008e <adc_cnt.2014>
     1ae:	50 91 8f 00 	lds	r21, 0x008F	; 0x80008f <adc_cnt.2014+0x1>
     1b2:	4f 5f       	subi	r20, 0xFF	; 255
     1b4:	5f 4f       	sbci	r21, 0xFF	; 255
     1b6:	9a 01       	movw	r18, r20
     1b8:	ab ea       	ldi	r26, 0xAB	; 171
     1ba:	ba ea       	ldi	r27, 0xAA	; 170
     1bc:	f0 d6       	rcall	.+3552   	; 0xf9e <__umulhisi3>
     1be:	96 95       	lsr	r25
     1c0:	87 95       	ror	r24
     1c2:	96 95       	lsr	r25
     1c4:	87 95       	ror	r24
     1c6:	9c 01       	movw	r18, r24
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	82 0f       	add	r24, r18
     1ce:	93 1f       	adc	r25, r19
     1d0:	88 0f       	add	r24, r24
     1d2:	99 1f       	adc	r25, r25
     1d4:	48 1b       	sub	r20, r24
     1d6:	59 0b       	sbc	r21, r25
     1d8:	50 93 8f 00 	sts	0x008F, r21	; 0x80008f <adc_cnt.2014+0x1>
     1dc:	40 93 8e 00 	sts	0x008E, r20	; 0x80008e <adc_cnt.2014>
}
     1e0:	df 91       	pop	r29
     1e2:	cf 91       	pop	r28
     1e4:	08 95       	ret

000001e6 <Init>:
  TCCR2B = _BV(CS20);
  // interrupt on timer overflow
  TIMSK2 |= _BV(TOIE2); 
#else
  // fast PWM, set OC2A on compare match, clear OC2A at bottom, clk/1
  TCCR2 = _BV(WGM20) | _BV(WGM21) | _BV(COM20) | _BV(COM21) | _BV(CS20);
     1e6:	89 e7       	ldi	r24, 0x79	; 121
     1e8:	85 bd       	out	0x25, r24	; 37
  // interrupt on timer overflow
  TIMSK |= _BV(TOIE2); 
     1ea:	89 b7       	in	r24, 0x39	; 57
     1ec:	80 64       	ori	r24, 0x40	; 64
     1ee:	89 bf       	out	0x39, r24	; 57
#endif
  // 36kHz carrier/timer
  OCR2  = 0x91;
     1f0:	81 e9       	ldi	r24, 0x91	; 145
     1f2:	83 bd       	out	0x23, r24	; 35
   UBRR0L = (uint8_t)(F_CPU/(BAUD_RATE*16L)-1);
   UBRR0H = (F_CPU/(BAUD_RATE*16L)-1) >> 8;
   UCSR0B = (1<<RXEN0) | (1<<TXEN0);
   UCSR0C = (1<<UCSZ00) | (1<<UCSZ01);
#else
  UBRRH = (((F_CPU/BAUD_RATE)/16)-1)>>8; 	// set baud rate
     1f4:	10 bc       	out	0x20, r1	; 32
  UBRRL = (((F_CPU/BAUD_RATE)/16)-1);
     1f6:	8f ec       	ldi	r24, 0xCF	; 207
     1f8:	89 b9       	out	0x09, r24	; 9
  UCSRB = (1<<RXEN)|(1<<TXEN);  // enable Rx & Tx
     1fa:	88 e1       	ldi	r24, 0x18	; 24
     1fc:	8a b9       	out	0x0a, r24	; 10
  UCSRC = (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);  // config USART; 8N1
     1fe:	86 e8       	ldi	r24, 0x86	; 134
     200:	80 bd       	out	0x20, r24	; 32
    Port B: Seriell Senden; Richtungsvorgabe Motor links; Takt fuer die
            Geschwindigkeit beider Motoren; Grueneanteil-Status-LED
    Port D: Richtungsvorgabe Motor rechts; Vordere LED;
            Odometrie-LED (Radsensor); Rotanteil-Status-LED
  */
  DDRB = IRTX | RIGHT_DIR | PWM | GREEN_LED;
     202:	8f e3       	ldi	r24, 0x3F	; 63
     204:	87 bb       	out	0x17, r24	; 23
  DDRD = LEFT_DIR | FRONT_LED | ODOMETRIE_LED | RED_LED | SWITCHES;  // Port-Bits als Output
     206:	8c ef       	ldi	r24, 0xFC	; 252
     208:	81 bb       	out	0x11, r24	; 17

  /*
    PWM-Kanaele OC1A und OC1B auf 8-Bit einstellen.
    Sie werden fuer die Geschwindigkeitsvorgaben der Motoren benutzt.
  */
  TCCR1A = _BV(WGM10) | _BV(COM1A1) | _BV(COM1B1);
     20a:	81 ea       	ldi	r24, 0xA1	; 161
     20c:	8f bd       	out	0x2f, r24	; 47
  TCCR1B = _BV(CS11);                 // tmr1-Timer mit MCU-Takt/8 betreiben.
     20e:	82 e0       	ldi	r24, 0x02	; 2
     210:	8e bd       	out	0x2e, r24	; 46
    Sonstige Vorbereitungen.
    - Alle LED's ausschalten
    - Motoren stoppen und schon mal auf Vorwaerts einstellen.
    - Globale Variable autoencoder ausschalten.
  */
  FrontLED (OFF);
     212:	80 e0       	ldi	r24, 0x00	; 0
     214:	a2 d1       	rcall	.+836    	; 0x55a <FrontLED>
  BackLED (ON, ON);
     216:	61 e0       	ldi	r22, 0x01	; 1
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	a8 d1       	rcall	.+848    	; 0x56c <BackLED>
  BackLED (OFF, OFF);
     21c:	60 e0       	ldi	r22, 0x00	; 0
     21e:	80 e0       	ldi	r24, 0x00	; 0
     220:	a5 d1       	rcall	.+842    	; 0x56c <BackLED>
  StatusLED (GREEN);
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	86 d1       	rcall	.+780    	; 0x532 <StatusLED>
  SWITCH_ON; 
     226:	93 9a       	sbi	0x12, 3	; 18

  MotorDir (FWD, FWD);
     228:	60 e2       	ldi	r22, 0x20	; 32
     22a:	80 e2       	ldi	r24, 0x20	; 32
     22c:	df d1       	rcall	.+958    	; 0x5ec <MotorDir>
  MotorSpeed (0, 0);
     22e:	60 e0       	ldi	r22, 0x00	; 0
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	d5 d1       	rcall	.+938    	; 0x5de <MotorSpeed>

  autoencode = FALSE;
     234:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <autoencode+0x1>
     238:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <autoencode>

  Ovr2IntFunc = 0;
     23c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <Ovr2IntFunc+0x1>
     240:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <Ovr2IntFunc>
  AdcIntFunc = IsrStandard;
     244:	8f e5       	ldi	r24, 0x5F	; 95
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <AdcIntFunc+0x1>
     24c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <AdcIntFunc>
  
  /*
   * Vorbereitung für WHEEL-Interrupts (Encoder)
    Port C als Input => dadurch gehen die Back-LED aus ...
  */
  DDRC &= ~ (_BV(PC0) | _BV(PC1));
     250:	84 b3       	in	r24, 0x14	; 20
     252:	8c 7f       	andi	r24, 0xFC	; 252
     254:	84 bb       	out	0x14, r24	; 20

  /*
    ... aber nun koennen die LED's am Rad eingeschaltet werden, und die
        Sensoren koennen gemessen werden.
  */
  ODOMETRIE_LED_ON;
     256:	97 9a       	sbi	0x12, 7	; 18

  /*
    Linken Odometrie-Sensor auswaehlen. (AVCC ref. with external capacitor)
  */
  ADMUX = _BV(ADLAR) | _BV(REFS0) | WHEEL_LEFT;
     258:	81 e6       	ldi	r24, 0x61	; 97
     25a:	87 b9       	out	0x07, r24	; 7
  /*
    AD-Wandler einschalten, Parameter einstellen und Starten. (clk/128)
    Startet den ADC im 'free running'-Mode (ADFR). Das heisst, der Wandler
    nach einer Messung automatisch wieder neu startet.
  */
  ADCSRA = _BV(ADEN) | _BV(ADFR) | _BV(ADIE) | _BV(ADSC) | _BV(ADPS0) | _BV(ADPS1) | _BV(ADPS2);
     25c:	8f ee       	ldi	r24, 0xEF	; 239
     25e:	86 b9       	out	0x06, r24	; 6
  
  /*
    Funktion zum ALLGEMEINEN ZULASSEN von Interrupts.
  */
  sei ();
     260:	78 94       	sei
     262:	08 95       	ret

00000264 <__vector_4>:

  \par  Beispiel:
  (Nicht vorhanden)
*****************************************************************************/
SIGNAL (TIMER2_OVF_vect)
{
     264:	1f 92       	push	r1
     266:	0f 92       	push	r0
     268:	0f b6       	in	r0, 0x3f	; 63
     26a:	0f 92       	push	r0
     26c:	11 24       	eor	r1, r1
     26e:	2f 93       	push	r18
     270:	3f 93       	push	r19
     272:	4f 93       	push	r20
     274:	5f 93       	push	r21
     276:	6f 93       	push	r22
     278:	7f 93       	push	r23
     27a:	8f 93       	push	r24
     27c:	9f 93       	push	r25
     27e:	af 93       	push	r26
     280:	bf 93       	push	r27
     282:	ef 93       	push	r30
     284:	ff 93       	push	r31
  TCNT2 += 0x25;
     286:	84 b5       	in	r24, 0x24	; 36
     288:	8b 5d       	subi	r24, 0xDB	; 219
     28a:	84 bd       	out	0x24, r24	; 36
  count36kHz ++;
     28c:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <count36kHz>
     290:	8f 5f       	subi	r24, 0xFF	; 255
     292:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <count36kHz>
  if (!count36kHz)
     296:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <count36kHz>
     29a:	81 11       	cpse	r24, r1
     29c:	13 c0       	rjmp	.+38     	; 0x2c4 <__vector_4+0x60>
    timebase ++;
     29e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <timebase>
     2a2:	90 91 c7 00 	lds	r25, 0x00C7	; 0x8000c7 <timebase+0x1>
     2a6:	a0 91 c8 00 	lds	r26, 0x00C8	; 0x8000c8 <timebase+0x2>
     2aa:	b0 91 c9 00 	lds	r27, 0x00C9	; 0x8000c9 <timebase+0x3>
     2ae:	01 96       	adiw	r24, 0x01	; 1
     2b0:	a1 1d       	adc	r26, r1
     2b2:	b1 1d       	adc	r27, r1
     2b4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <timebase>
     2b8:	90 93 c7 00 	sts	0x00C7, r25	; 0x8000c7 <timebase+0x1>
     2bc:	a0 93 c8 00 	sts	0x00C8, r26	; 0x8000c8 <timebase+0x2>
     2c0:	b0 93 c9 00 	sts	0x00C9, r27	; 0x8000c9 <timebase+0x3>
  if (Ovr2IntFunc)
     2c4:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <Ovr2IntFunc>
     2c8:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <Ovr2IntFunc+0x1>
     2cc:	89 2b       	or	r24, r25
     2ce:	29 f0       	breq	.+10     	; 0x2da <__vector_4+0x76>
    Ovr2IntFunc();
     2d0:	e0 91 c4 00 	lds	r30, 0x00C4	; 0x8000c4 <Ovr2IntFunc>
     2d4:	f0 91 c5 00 	lds	r31, 0x00C5	; 0x8000c5 <Ovr2IntFunc+0x1>
     2d8:	09 95       	icall
}
     2da:	ff 91       	pop	r31
     2dc:	ef 91       	pop	r30
     2de:	bf 91       	pop	r27
     2e0:	af 91       	pop	r26
     2e2:	9f 91       	pop	r25
     2e4:	8f 91       	pop	r24
     2e6:	7f 91       	pop	r23
     2e8:	6f 91       	pop	r22
     2ea:	5f 91       	pop	r21
     2ec:	4f 91       	pop	r20
     2ee:	3f 91       	pop	r19
     2f0:	2f 91       	pop	r18
     2f2:	0f 90       	pop	r0
     2f4:	0f be       	out	0x3f, r0	; 63
     2f6:	0f 90       	pop	r0
     2f8:	1f 90       	pop	r1
     2fa:	18 95       	reti

000002fc <__vector_3>:
#if defined(__AVR_ATmega168__)
SIGNAL(TIMER2_COMPA_vect)
#else
SIGNAL(TIMER2_COMP_vect) 
#endif
{
     2fc:	1f 92       	push	r1
     2fe:	0f 92       	push	r0
     300:	0f b6       	in	r0, 0x3f	; 63
     302:	0f 92       	push	r0
     304:	11 24       	eor	r1, r1
     306:	8f 93       	push	r24
     308:	9f 93       	push	r25
     30a:	af 93       	push	r26
     30c:	bf 93       	push	r27
	count36kHz++;
     30e:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <count36kHz>
     312:	8f 5f       	subi	r24, 0xFF	; 255
     314:	80 93 c3 00 	sts	0x00C3, r24	; 0x8000c3 <count36kHz>
  if (!count36kHz)
     318:	80 91 c3 00 	lds	r24, 0x00C3	; 0x8000c3 <count36kHz>
     31c:	81 11       	cpse	r24, r1
     31e:	13 c0       	rjmp	.+38     	; 0x346 <__vector_3+0x4a>
    timebase ++;
     320:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <timebase>
     324:	90 91 c7 00 	lds	r25, 0x00C7	; 0x8000c7 <timebase+0x1>
     328:	a0 91 c8 00 	lds	r26, 0x00C8	; 0x8000c8 <timebase+0x2>
     32c:	b0 91 c9 00 	lds	r27, 0x00C9	; 0x8000c9 <timebase+0x3>
     330:	01 96       	adiw	r24, 0x01	; 1
     332:	a1 1d       	adc	r26, r1
     334:	b1 1d       	adc	r27, r1
     336:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <timebase>
     33a:	90 93 c7 00 	sts	0x00C7, r25	; 0x8000c7 <timebase+0x1>
     33e:	a0 93 c8 00 	sts	0x00C8, r26	; 0x8000c8 <timebase+0x2>
     342:	b0 93 c9 00 	sts	0x00C9, r27	; 0x8000c9 <timebase+0x3>
}
     346:	bf 91       	pop	r27
     348:	af 91       	pop	r26
     34a:	9f 91       	pop	r25
     34c:	8f 91       	pop	r24
     34e:	0f 90       	pop	r0
     350:	0f be       	out	0x3f, r0	; 63
     352:	0f 90       	pop	r0
     354:	1f 90       	pop	r1
     356:	18 95       	reti

00000358 <__vector_14>:

  \par  Beispiel:
  (Nicht vorhanden)
*****************************************************************************/
SIGNAL (ADC_vect)
{
     358:	1f 92       	push	r1
     35a:	0f 92       	push	r0
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	0f 92       	push	r0
     360:	11 24       	eor	r1, r1
     362:	2f 93       	push	r18
     364:	3f 93       	push	r19
     366:	4f 93       	push	r20
     368:	5f 93       	push	r21
     36a:	6f 93       	push	r22
     36c:	7f 93       	push	r23
     36e:	8f 93       	push	r24
     370:	9f 93       	push	r25
     372:	af 93       	push	r26
     374:	bf 93       	push	r27
     376:	ef 93       	push	r30
     378:	ff 93       	push	r31
    AdcIntFunc();
     37a:	e0 91 bb 00 	lds	r30, 0x00BB	; 0x8000bb <AdcIntFunc>
     37e:	f0 91 bc 00 	lds	r31, 0x00BC	; 0x8000bc <AdcIntFunc+0x1>
     382:	09 95       	icall
}
     384:	ff 91       	pop	r31
     386:	ef 91       	pop	r30
     388:	bf 91       	pop	r27
     38a:	af 91       	pop	r26
     38c:	9f 91       	pop	r25
     38e:	8f 91       	pop	r24
     390:	7f 91       	pop	r23
     392:	6f 91       	pop	r22
     394:	5f 91       	pop	r21
     396:	4f 91       	pop	r20
     398:	3f 91       	pop	r19
     39a:	2f 91       	pop	r18
     39c:	0f 90       	pop	r0
     39e:	0f be       	out	0x3f, r0	; 63
     3a0:	0f 90       	pop	r0
     3a2:	1f 90       	pop	r1
     3a4:	18 95       	reti

000003a6 <GoTurn>:
*****************************************************************************/
void GoTurn (
  int distance,
  int degree,
  int speed)
{
     3a6:	6f 92       	push	r6
     3a8:	7f 92       	push	r7
     3aa:	8f 92       	push	r8
     3ac:	9f 92       	push	r9
     3ae:	af 92       	push	r10
     3b0:	bf 92       	push	r11
     3b2:	cf 92       	push	r12
     3b4:	df 92       	push	r13
     3b6:	ef 92       	push	r14
     3b8:	ff 92       	push	r15
     3ba:	0f 93       	push	r16
     3bc:	1f 93       	push	r17
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	ec 01       	movw	r28, r24
     3c4:	8b 01       	movw	r16, r22
     3c6:	3a 01       	movw	r6, r20
            int   tot_count = 0;
            int   diff = 0;
            int   l_speed = speed, r_speed = speed;

  /* stop the motors until the direction is set */
  MotorSpeed (0, 0);
     3c8:	60 e0       	ldi	r22, 0x00	; 0
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	08 d1       	rcall	.+528    	; 0x5de <MotorSpeed>

  /* if distance is NOT zero, then take this value to go ... */
  if (distance != 0)
     3ce:	20 97       	sbiw	r28, 0x00	; 0
     3d0:	d9 f0       	breq	.+54     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
  {
    /* calculate tics from mm */
    enc_count  = abs (distance) * 10000L;
     3d2:	de 01       	movw	r26, r28
     3d4:	dd 23       	and	r29, r29
     3d6:	24 f4       	brge	.+8      	; 0x3e0 <GoTurn+0x3a>
     3d8:	aa 27       	eor	r26, r26
     3da:	bb 27       	eor	r27, r27
     3dc:	ac 1b       	sub	r26, r28
     3de:	bd 0b       	sbc	r27, r29
     3e0:	20 e1       	ldi	r18, 0x10	; 16
     3e2:	37 e2       	ldi	r19, 0x27	; 39
     3e4:	e8 d5       	rcall	.+3024   	; 0xfb6 <__usmulhisi3>
    enc_count /= MY_GO_ENC_COUNT_VALUE;
     3e6:	23 ea       	ldi	r18, 0xA3	; 163
     3e8:	3b e4       	ldi	r19, 0x4B	; 75
     3ea:	40 e0       	ldi	r20, 0x00	; 0
     3ec:	50 e0       	ldi	r21, 0x00	; 0
     3ee:	99 d5       	rcall	.+2866   	; 0xf22 <__udivmodsi4>
     3f0:	49 01       	movw	r8, r18
     3f2:	5a 01       	movw	r10, r20

    if (distance < 0)
     3f4:	dd 23       	and	r29, r29
     3f6:	24 f4       	brge	.+8      	; 0x400 <__LOCK_REGION_LENGTH__>
      MotorDir (RWD, RWD);
     3f8:	60 e1       	ldi	r22, 0x10	; 16
     3fa:	80 e1       	ldi	r24, 0x10	; 16
     3fc:	f7 d0       	rcall	.+494    	; 0x5ec <MotorDir>
     3fe:	1e c0       	rjmp	.+60     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
    else
      MotorDir (FWD, FWD);
     400:	60 e2       	ldi	r22, 0x20	; 32
     402:	80 e2       	ldi	r24, 0x20	; 32
     404:	f3 d0       	rcall	.+486    	; 0x5ec <MotorDir>
     406:	1a c0       	rjmp	.+52     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
  }
  /* ... else take the value degree for a turn */
  else
  {
    /*  calculate tics from degree */
    enc_count  = abs (degree) * MY_TURN_ENC_COUNT_VALUE;
     408:	d8 01       	movw	r26, r16
     40a:	11 23       	and	r17, r17
     40c:	24 f4       	brge	.+8      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     40e:	aa 27       	eor	r26, r26
     410:	bb 27       	eor	r27, r27
     412:	a0 1b       	sub	r26, r16
     414:	b1 0b       	sbc	r27, r17
     416:	21 eb       	ldi	r18, 0xB1	; 177
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	cd d5       	rcall	.+2970   	; 0xfb6 <__usmulhisi3>
    enc_count /= 360L;
     41c:	28 e6       	ldi	r18, 0x68	; 104
     41e:	31 e0       	ldi	r19, 0x01	; 1
     420:	40 e0       	ldi	r20, 0x00	; 0
     422:	50 e0       	ldi	r21, 0x00	; 0
     424:	7e d5       	rcall	.+2812   	; 0xf22 <__udivmodsi4>
     426:	49 01       	movw	r8, r18
     428:	5a 01       	movw	r10, r20

    if (degree < 0)
     42a:	11 23       	and	r17, r17
     42c:	24 f4       	brge	.+8      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
      MotorDir (RWD, FWD);
     42e:	60 e2       	ldi	r22, 0x20	; 32
     430:	80 e1       	ldi	r24, 0x10	; 16
     432:	dc d0       	rcall	.+440    	; 0x5ec <MotorDir>
     434:	03 c0       	rjmp	.+6      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
    else
      MotorDir (FWD, RWD);
     436:	60 e1       	ldi	r22, 0x10	; 16
     438:	80 e2       	ldi	r24, 0x20	; 32
     43a:	d8 d0       	rcall	.+432    	; 0x5ec <MotorDir>
  }

  /* reset encoder */
  EncoderSet (0, 0);
     43c:	60 e0       	ldi	r22, 0x00	; 0
     43e:	70 e0       	ldi	r23, 0x00	; 0
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	6f d0       	rcall	.+222    	; 0x524 <EncoderSet>

  /* now start the machine */
  MotorSpeed (l_speed, r_speed);
     446:	66 2d       	mov	r22, r6
     448:	86 2d       	mov	r24, r6
     44a:	c9 d0       	rcall	.+402    	; 0x5de <MotorSpeed>

  while (tot_count < enc_count)
     44c:	81 14       	cp	r8, r1
     44e:	91 04       	cpc	r9, r1
     450:	a1 04       	cpc	r10, r1
     452:	b1 04       	cpc	r11, r1
     454:	09 f4       	brne	.+2      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     456:	42 c0       	rjmp	.+132    	; 0x4dc <__stack+0x7d>
     458:	63 01       	movw	r12, r6
     45a:	e3 01       	movw	r28, r6
     45c:	e1 2c       	mov	r14, r1
     45e:	f1 2c       	mov	r15, r1
  {
    tot_count += encoder [LEFT];
     460:	0f eb       	ldi	r16, 0xBF	; 191
     462:	10 e0       	ldi	r17, 0x00	; 0
     464:	f8 01       	movw	r30, r16
     466:	80 81       	ld	r24, Z
     468:	91 81       	ldd	r25, Z+1	; 0x01
     46a:	e8 0e       	add	r14, r24
     46c:	f9 1e       	adc	r15, r25
    diff = encoder [LEFT] - encoder [RIGHT];
     46e:	80 81       	ld	r24, Z
     470:	91 81       	ldd	r25, Z+1	; 0x01
     472:	22 81       	ldd	r18, Z+2	; 0x02
     474:	33 81       	ldd	r19, Z+3	; 0x03
     476:	82 1b       	sub	r24, r18
     478:	93 0b       	sbc	r25, r19

    if (diff > 0)
     47a:	18 16       	cp	r1, r24
     47c:	19 06       	cpc	r1, r25
     47e:	64 f4       	brge	.+24     	; 0x498 <__stack+0x39>
    { /* Left faster than right */
      if ((l_speed > speed) || (r_speed > 244))
     480:	6c 16       	cp	r6, r28
     482:	7d 06       	cpc	r7, r29
     484:	24 f0       	brlt	.+8      	; 0x48e <__stack+0x2f>
     486:	f5 ef       	ldi	r31, 0xF5	; 245
     488:	cf 16       	cp	r12, r31
     48a:	d1 04       	cpc	r13, r1
     48c:	14 f0       	brlt	.+4      	; 0x492 <__stack+0x33>
        l_speed -= 10;
     48e:	2a 97       	sbiw	r28, 0x0a	; 10
     490:	03 c0       	rjmp	.+6      	; 0x498 <__stack+0x39>
      else
        r_speed += 10;
     492:	2a e0       	ldi	r18, 0x0A	; 10
     494:	c2 0e       	add	r12, r18
     496:	d1 1c       	adc	r13, r1
    }

    if (diff < 0)
     498:	99 23       	and	r25, r25
     49a:	5c f4       	brge	.+22     	; 0x4b2 <__stack+0x53>
    { /* Right faster than left */
      if ((r_speed > speed) || (l_speed > 244))
     49c:	6c 14       	cp	r6, r12
     49e:	7d 04       	cpc	r7, r13
     4a0:	1c f0       	brlt	.+6      	; 0x4a8 <__stack+0x49>
     4a2:	c5 3f       	cpi	r28, 0xF5	; 245
     4a4:	d1 05       	cpc	r29, r1
     4a6:	24 f0       	brlt	.+8      	; 0x4b0 <__stack+0x51>
        r_speed -= 10;
     4a8:	8a e0       	ldi	r24, 0x0A	; 10
     4aa:	c8 1a       	sub	r12, r24
     4ac:	d1 08       	sbc	r13, r1
     4ae:	01 c0       	rjmp	.+2      	; 0x4b2 <__stack+0x53>
      else
        l_speed += 10;
     4b0:	2a 96       	adiw	r28, 0x0a	; 10
    }
    /* reset encoder */
    EncoderSet (0, 0);
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	70 e0       	ldi	r23, 0x00	; 0
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	34 d0       	rcall	.+104    	; 0x524 <EncoderSet>

    MotorSpeed (l_speed, r_speed);
     4bc:	6c 2d       	mov	r22, r12
     4be:	8c 2f       	mov	r24, r28
     4c0:	8e d0       	rcall	.+284    	; 0x5de <MotorSpeed>
    Msleep (1);
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	12 d1       	rcall	.+548    	; 0x6ec <Msleep>
  EncoderSet (0, 0);

  /* now start the machine */
  MotorSpeed (l_speed, r_speed);

  while (tot_count < enc_count)
     4c8:	c7 01       	movw	r24, r14
     4ca:	0f 2c       	mov	r0, r15
     4cc:	00 0c       	add	r0, r0
     4ce:	aa 0b       	sbc	r26, r26
     4d0:	bb 0b       	sbc	r27, r27
     4d2:	88 15       	cp	r24, r8
     4d4:	99 05       	cpc	r25, r9
     4d6:	aa 05       	cpc	r26, r10
     4d8:	bb 05       	cpc	r27, r11
     4da:	20 f2       	brcs	.-120    	; 0x464 <__stack+0x5>
    EncoderSet (0, 0);

    MotorSpeed (l_speed, r_speed);
    Msleep (1);
  }
  MotorDir (BREAK, BREAK);
     4dc:	60 e0       	ldi	r22, 0x00	; 0
     4de:	80 e0       	ldi	r24, 0x00	; 0
     4e0:	85 d0       	rcall	.+266    	; 0x5ec <MotorDir>
  Msleep (200);
     4e2:	88 ec       	ldi	r24, 0xC8	; 200
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	02 d1       	rcall	.+516    	; 0x6ec <Msleep>
}
     4e8:	df 91       	pop	r29
     4ea:	cf 91       	pop	r28
     4ec:	1f 91       	pop	r17
     4ee:	0f 91       	pop	r16
     4f0:	ff 90       	pop	r15
     4f2:	ef 90       	pop	r14
     4f4:	df 90       	pop	r13
     4f6:	cf 90       	pop	r12
     4f8:	bf 90       	pop	r11
     4fa:	af 90       	pop	r10
     4fc:	9f 90       	pop	r9
     4fe:	8f 90       	pop	r8
     500:	7f 90       	pop	r7
     502:	6f 90       	pop	r6
     504:	08 95       	ret

00000506 <EncoderInit>:
  \par Beispiel:
  (siehe unter EncoderInit bzw. in den examples)
*****************************************************************************/
void EncoderStart (void)
{
  autoencode = TRUE;
     506:	f8 94       	cli
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	90 93 be 00 	sts	0x00BE, r25	; 0x8000be <autoencode+0x1>
     510:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <autoencode>
     514:	ef eb       	ldi	r30, 0xBF	; 191
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	11 82       	std	Z+1, r1	; 0x01
     51a:	10 82       	st	Z, r1
     51c:	13 82       	std	Z+3, r1	; 0x03
     51e:	12 82       	std	Z+2, r1	; 0x02
     520:	78 94       	sei
     522:	08 95       	ret

00000524 <EncoderSet>:
*****************************************************************************/
void EncoderSet (
  int setl,
  int setr)
{
  encoder [LEFT]  = setl;
     524:	ef eb       	ldi	r30, 0xBF	; 191
     526:	f0 e0       	ldi	r31, 0x00	; 0
     528:	91 83       	std	Z+1, r25	; 0x01
     52a:	80 83       	st	Z, r24
  encoder [RIGHT] = setr;
     52c:	73 83       	std	Z+3, r23	; 0x03
     52e:	62 83       	std	Z+2, r22	; 0x02
     530:	08 95       	ret

00000532 <StatusLED>:
  \endcode
*****************************************************************************/
void StatusLED (
  unsigned char color)
{
  if (color == OFF)
     532:	81 11       	cpse	r24, r1
     534:	03 c0       	rjmp	.+6      	; 0x53c <StatusLED+0xa>
  {
    GREEN_LED_OFF;
     536:	c0 98       	cbi	0x18, 0	; 24
    RED_LED_OFF;
     538:	92 98       	cbi	0x12, 2	; 18
     53a:	0a c0       	rjmp	.+20     	; 0x550 <StatusLED+0x1e>
  }
  if (color == GREEN)
     53c:	81 30       	cpi	r24, 0x01	; 1
     53e:	19 f4       	brne	.+6      	; 0x546 <StatusLED+0x14>
  {
    GREEN_LED_ON;
     540:	c0 9a       	sbi	0x18, 0	; 24
    RED_LED_OFF;
     542:	92 98       	cbi	0x12, 2	; 18
     544:	08 95       	ret
  }
  if (color == YELLOW)
     546:	83 30       	cpi	r24, 0x03	; 3
     548:	19 f4       	brne	.+6      	; 0x550 <StatusLED+0x1e>
  {
    GREEN_LED_ON;
     54a:	c0 9a       	sbi	0x18, 0	; 24
    RED_LED_ON;
     54c:	92 9a       	sbi	0x12, 2	; 18
     54e:	08 95       	ret
  }
  if (color == RED)
     550:	82 30       	cpi	r24, 0x02	; 2
     552:	11 f4       	brne	.+4      	; 0x558 <StatusLED+0x26>
  {
    GREEN_LED_OFF;
     554:	c0 98       	cbi	0x18, 0	; 24
    RED_LED_ON;
     556:	92 9a       	sbi	0x12, 2	; 18
     558:	08 95       	ret

0000055a <FrontLED>:
  \endcode
*****************************************************************************/
void FrontLED (
  unsigned char status)
{
  PORTD = (PORTD &~(1 << PD6)) | (status << PD6);
     55a:	22 b3       	in	r18, 0x12	; 18
     55c:	2f 7b       	andi	r18, 0xBF	; 191
     55e:	30 e4       	ldi	r19, 0x40	; 64
     560:	83 9f       	mul	r24, r19
     562:	c0 01       	movw	r24, r0
     564:	11 24       	eor	r1, r1
     566:	82 2b       	or	r24, r18
     568:	82 bb       	out	0x12, r24	; 18
     56a:	08 95       	ret

0000056c <BackLED>:
*****************************************************************************/
void BackLED (
  unsigned char left,
  unsigned char right)
{
  if (left || right)
     56c:	81 11       	cpse	r24, r1
     56e:	0f c0       	rjmp	.+30     	; 0x58e <BackLED+0x22>
     570:	61 11       	cpse	r22, r1
     572:	05 c0       	rjmp	.+10     	; 0x57e <BackLED+0x12>
    PORTD &= ~(1 << PD7);               // Rad-LED's OFF
    DDRC |= (1 << PC0) | (1 << PC1);    // Port als Output => KEINE Odometrie
    PORTC |= (1 << PC0) | (1 << PC1);
  }
  if (!left)
    PORTC &= ~(1 << PC1);
     574:	a9 98       	cbi	0x15, 1	; 21
  if (!right)
     576:	61 11       	cpse	r22, r1
     578:	12 c0       	rjmp	.+36     	; 0x59e <BackLED+0x32>
    PORTC &= ~(1 << PC0);
     57a:	a8 98       	cbi	0x15, 0	; 21
}
     57c:	08 95       	ret
  unsigned char left,
  unsigned char right)
{
  if (left || right)
  {
    PORTD &= ~(1 << PD7);               // Rad-LED's OFF
     57e:	97 98       	cbi	0x12, 7	; 18
    DDRC |= (1 << PC0) | (1 << PC1);    // Port als Output => KEINE Odometrie
     580:	84 b3       	in	r24, 0x14	; 20
     582:	83 60       	ori	r24, 0x03	; 3
     584:	84 bb       	out	0x14, r24	; 20
    PORTC |= (1 << PC0) | (1 << PC1);
     586:	85 b3       	in	r24, 0x15	; 21
     588:	83 60       	ori	r24, 0x03	; 3
     58a:	85 bb       	out	0x15, r24	; 21
     58c:	f3 cf       	rjmp	.-26     	; 0x574 <BackLED+0x8>
  unsigned char left,
  unsigned char right)
{
  if (left || right)
  {
    PORTD &= ~(1 << PD7);               // Rad-LED's OFF
     58e:	97 98       	cbi	0x12, 7	; 18
    DDRC |= (1 << PC0) | (1 << PC1);    // Port als Output => KEINE Odometrie
     590:	84 b3       	in	r24, 0x14	; 20
     592:	83 60       	ori	r24, 0x03	; 3
     594:	84 bb       	out	0x14, r24	; 20
    PORTC |= (1 << PC0) | (1 << PC1);
     596:	85 b3       	in	r24, 0x15	; 21
     598:	83 60       	ori	r24, 0x03	; 3
     59a:	85 bb       	out	0x15, r24	; 21
     59c:	ec cf       	rjmp	.-40     	; 0x576 <BackLED+0xa>
     59e:	08 95       	ret

000005a0 <SetMotorPower>:
  \endcode
*****************************************************************************/
void SetMotorPower (
  int8_t leftpwm,
  int8_t rightpwm)
{
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	d8 2f       	mov	r29, r24
     5a6:	c6 2f       	mov	r28, r22
  unsigned char left, right;

  if (leftpwm < 0)                      // Ein negativer Wert fuehrt ...
     5a8:	88 23       	and	r24, r24
     5aa:	1c f4       	brge	.+6      	; 0x5b2 <SetMotorPower+0x12>
  {
    left = RWD;                         // ... zu einer Rueckwaertsfahrt, ...
    leftpwm = -leftpwm;                 // aber immer positiv PWM-Wert
     5ac:	d1 95       	neg	r29
{
  unsigned char left, right;

  if (leftpwm < 0)                      // Ein negativer Wert fuehrt ...
  {
    left = RWD;                         // ... zu einer Rueckwaertsfahrt, ...
     5ae:	80 e1       	ldi	r24, 0x10	; 16
     5b0:	01 c0       	rjmp	.+2      	; 0x5b4 <SetMotorPower+0x14>
    leftpwm = -leftpwm;                 // aber immer positiv PWM-Wert
  }
  else
    left = FWD;                         // ... sonst nach vorne, ...
     5b2:	80 e2       	ldi	r24, 0x20	; 32
  if (leftpwm == 0)
     5b4:	d1 11       	cpse	r29, r1
     5b6:	01 c0       	rjmp	.+2      	; 0x5ba <SetMotorPower+0x1a>
    left = BREAK;                       // ... oder bei 0 zum Bremsen.
     5b8:	80 e0       	ldi	r24, 0x00	; 0

  if (rightpwm < 0)
     5ba:	cc 23       	and	r28, r28
     5bc:	1c f4       	brge	.+6      	; 0x5c4 <SetMotorPower+0x24>
  {
    right = RWD;
    rightpwm = -rightpwm;
     5be:	c1 95       	neg	r28
  if (leftpwm == 0)
    left = BREAK;                       // ... oder bei 0 zum Bremsen.

  if (rightpwm < 0)
  {
    right = RWD;
     5c0:	60 e1       	ldi	r22, 0x10	; 16
     5c2:	01 c0       	rjmp	.+2      	; 0x5c6 <SetMotorPower+0x26>
    rightpwm = -rightpwm;
  }
  else
    right = FWD;
     5c4:	60 e2       	ldi	r22, 0x20	; 32
  if (rightpwm == 0)
     5c6:	c1 11       	cpse	r28, r1
     5c8:	01 c0       	rjmp	.+2      	; 0x5cc <SetMotorPower+0x2c>
    right = BREAK;
     5ca:	60 e0       	ldi	r22, 0x00	; 0

  MotorDir (left, right);                 // Drehrichtung setzen
     5cc:	0f d0       	rcall	.+30     	; 0x5ec <MotorDir>
  /*
    Die Geschwindigkeitsparameter mit 2 multiplizieren, da der Absolutwert
    der Parameter dieser Funktion nur genau die Haelfte von der MotorSpeed()-
    Funktion betraegt.
  */
  MotorSpeed (leftpwm * 2, rightpwm * 2);
     5ce:	6c 2f       	mov	r22, r28
     5d0:	66 0f       	add	r22, r22
     5d2:	8d 2f       	mov	r24, r29
     5d4:	88 0f       	add	r24, r24
     5d6:	03 d0       	rcall	.+6      	; 0x5de <MotorSpeed>
}
     5d8:	df 91       	pop	r29
     5da:	cf 91       	pop	r28
     5dc:	08 95       	ret

000005de <MotorSpeed>:
*****************************************************************************/
void MotorSpeed (
  unsigned char left_speed,
  unsigned char right_speed)
{
  OCR1A = left_speed;
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	9b bd       	out	0x2b, r25	; 43
     5e2:	8a bd       	out	0x2a, r24	; 42
  OCR1B = right_speed;
     5e4:	70 e0       	ldi	r23, 0x00	; 0
     5e6:	79 bd       	out	0x29, r23	; 41
     5e8:	68 bd       	out	0x28, r22	; 40
     5ea:	08 95       	ret

000005ec <MotorDir>:
*****************************************************************************/
void MotorDir (
  unsigned char left_dir,
  unsigned char right_dir)
{
  PORTD = (PORTD &~ ((1 << PD4) | (1 << PD5))) | left_dir;
     5ec:	92 b3       	in	r25, 0x12	; 18
     5ee:	9f 7c       	andi	r25, 0xCF	; 207
     5f0:	89 2b       	or	r24, r25
     5f2:	82 bb       	out	0x12, r24	; 18
  PORTB = (PORTB &~ ((1 << PB4) | (1 << PB5))) | right_dir;
     5f4:	88 b3       	in	r24, 0x18	; 24
     5f6:	8f 7c       	andi	r24, 0xCF	; 207
     5f8:	68 2b       	or	r22, r24
     5fa:	68 bb       	out	0x18, r22	; 24
     5fc:	08 95       	ret

000005fe <UartPutc>:
  \endcode
*****************************************************************************/
void UartPutc (
  unsigned char zeichen)
{
  UCSRB  = 0x08;                        // enable transmitter
     5fe:	98 e0       	ldi	r25, 0x08	; 8
     600:	9a b9       	out	0x0a, r25	; 10
  UCSRA |= 0x40;                        // clear transmitter flag
     602:	5e 9a       	sbi	0x0b, 6	; 11
  while (!(UCSRA & 0x20))               // wait for empty transmit buffer
     604:	5d 9b       	sbis	0x0b, 5	; 11
     606:	fe cf       	rjmp	.-4      	; 0x604 <UartPutc+0x6>
    ;
  UDR = zeichen;
     608:	8c b9       	out	0x0c, r24	; 12
  while (!(UCSRA & 0x40))               // Wait for transmit complete flag (TXC)
     60a:	5e 9b       	sbis	0x0b, 6	; 11
     60c:	fe cf       	rjmp	.-4      	; 0x60a <UartPutc+0xc>
    ;
  UCSRB  = 0x00;                        // disable transmitter / powersave
     60e:	1a b8       	out	0x0a, r1	; 10
     610:	08 95       	ret

00000612 <SerPrint>:
  SerPrint ("Hallo ASURO!\r\n");
  \endcode
*****************************************************************************/
void SerPrint (
  char *data)
{
     612:	0f 93       	push	r16
     614:	1f 93       	push	r17
     616:	cf 93       	push	r28
     618:	fc 01       	movw	r30, r24
  unsigned char i = 0;

  while (data [i] != 0x00)
     61a:	80 81       	ld	r24, Z
     61c:	88 23       	and	r24, r24
     61e:	51 f0       	breq	.+20     	; 0x634 <SerPrint+0x22>
     620:	8f 01       	movw	r16, r30
     622:	c0 e0       	ldi	r28, 0x00	; 0
    UartPutc (data [i++]);
     624:	cf 5f       	subi	r28, 0xFF	; 255
     626:	eb df       	rcall	.-42     	; 0x5fe <UartPutc>
void SerPrint (
  char *data)
{
  unsigned char i = 0;

  while (data [i] != 0x00)
     628:	f8 01       	movw	r30, r16
     62a:	ec 0f       	add	r30, r28
     62c:	f1 1d       	adc	r31, r1
     62e:	80 81       	ld	r24, Z
     630:	81 11       	cpse	r24, r1
     632:	f8 cf       	rjmp	.-16     	; 0x624 <SerPrint+0x12>
    UartPutc (data [i++]);
}
     634:	cf 91       	pop	r28
     636:	1f 91       	pop	r17
     638:	0f 91       	pop	r16
     63a:	08 95       	ret

0000063c <PrintInt>:
  }
  \endcode
*****************************************************************************/
void PrintInt (
  int wert)
{
     63c:	cf 93       	push	r28
     63e:	df 93       	push	r29
     640:	cd b7       	in	r28, 0x3d	; 61
     642:	de b7       	in	r29, 0x3e	; 62
     644:	27 97       	sbiw	r28, 0x07	; 7
     646:	0f b6       	in	r0, 0x3f	; 63
     648:	f8 94       	cli
     64a:	de bf       	out	0x3e, r29	; 62
     64c:	0f be       	out	0x3f, r0	; 63
     64e:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     650:	4a e0       	ldi	r20, 0x0A	; 10
     652:	be 01       	movw	r22, r28
     654:	6f 5f       	subi	r22, 0xFF	; 255
     656:	7f 4f       	sbci	r23, 0xFF	; 255
     658:	be d4       	rcall	.+2428   	; 0xfd6 <__itoa_ncheck>
  char text [7];                        // "-12345"

  itoa (wert, text, 10);
  SerPrint (text);
     65a:	ce 01       	movw	r24, r28
     65c:	01 96       	adiw	r24, 0x01	; 1
     65e:	d9 df       	rcall	.-78     	; 0x612 <SerPrint>
}
     660:	27 96       	adiw	r28, 0x07	; 7
     662:	0f b6       	in	r0, 0x3f	; 63
     664:	f8 94       	cli
     666:	de bf       	out	0x3e, r29	; 62
     668:	0f be       	out	0x3f, r0	; 63
     66a:	cd bf       	out	0x3d, r28	; 61
     66c:	df 91       	pop	r29
     66e:	cf 91       	pop	r28
     670:	08 95       	ret

00000672 <PollSwitch>:
*****************************************************************************/
unsigned char PollSwitch (void)
{
  unsigned int i;
  
  if (!switched) return 0;        // Kehrt sofort zurück, falls kein Taster gedrueckt ist 
     672:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <switched>
     676:	90 91 ba 00 	lds	r25, 0x00BA	; 0x8000ba <switched+0x1>
     67a:	89 2b       	or	r24, r25
     67c:	19 f1       	breq	.+70     	; 0x6c4 <PollSwitch+0x52>
  
  i = ReadADC(SWITCH, 15);  // sleep 15 ms -> Rückwärtskompatibel?! und wg. timing da draussen und drinnen (IsrStandard())
     67e:	6f e0       	ldi	r22, 0x0F	; 15
     680:	70 e0       	ldi	r23, 0x00	; 0
     682:	84 e0       	ldi	r24, 0x04	; 4
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	ff dc       	rcall	.-1538   	; 0x86 <ReadADC>

  if (i>=MY_SWITCH_THRESHHOLD) return 0;	// Eher rauschen -> raus hier!
     688:	82 3f       	cpi	r24, 0xF2	; 242
     68a:	23 e0       	ldi	r18, 0x03	; 3
     68c:	92 07       	cpc	r25, r18
     68e:	e0 f4       	brcc	.+56     	; 0x6c8 <PollSwitch+0x56>
    eine Rechnung ohne FLOAT-Berechnungen.
  return  ((unsigned char) ((( 1024.0/(float)i - 1.0)) * 61.0 + 0.5));

    Wert 61L evtl. anpasssen, falls fuer K1 falsche Werte zurueckgegebn werden.
  */
  return ((10240000L / (long)i - 10000L) * MY_SWITCH_VALUE + 5000L) / 10000;
     690:	9c 01       	movw	r18, r24
     692:	40 e0       	ldi	r20, 0x00	; 0
     694:	50 e0       	ldi	r21, 0x00	; 0
     696:	60 e0       	ldi	r22, 0x00	; 0
     698:	70 e4       	ldi	r23, 0x40	; 64
     69a:	8c e9       	ldi	r24, 0x9C	; 156
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	63 d4       	rcall	.+2246   	; 0xf66 <__divmodsi4>
     6a0:	20 51       	subi	r18, 0x10	; 16
     6a2:	37 42       	sbci	r19, 0x27	; 39
     6a4:	41 09       	sbc	r20, r1
     6a6:	51 09       	sbc	r21, r1
     6a8:	ae e3       	ldi	r26, 0x3E	; 62
     6aa:	b0 e0       	ldi	r27, 0x00	; 0
     6ac:	8a d4       	rcall	.+2324   	; 0xfc2 <__muluhisi3>
     6ae:	68 57       	subi	r22, 0x78	; 120
     6b0:	7c 4e       	sbci	r23, 0xEC	; 236
     6b2:	8f 4f       	sbci	r24, 0xFF	; 255
     6b4:	9f 4f       	sbci	r25, 0xFF	; 255
     6b6:	20 e1       	ldi	r18, 0x10	; 16
     6b8:	37 e2       	ldi	r19, 0x27	; 39
     6ba:	40 e0       	ldi	r20, 0x00	; 0
     6bc:	50 e0       	ldi	r21, 0x00	; 0
     6be:	53 d4       	rcall	.+2214   	; 0xf66 <__divmodsi4>
     6c0:	82 2f       	mov	r24, r18
     6c2:	08 95       	ret
*****************************************************************************/
unsigned char PollSwitch (void)
{
  unsigned int i;
  
  if (!switched) return 0;        // Kehrt sofort zurück, falls kein Taster gedrueckt ist 
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	08 95       	ret
  
  i = ReadADC(SWITCH, 15);  // sleep 15 ms -> Rückwärtskompatibel?! und wg. timing da draussen und drinnen (IsrStandard())

  if (i>=MY_SWITCH_THRESHHOLD) return 0;	// Eher rauschen -> raus hier!
     6c8:	80 e0       	ldi	r24, 0x00	; 0
  return  ((unsigned char) ((( 1024.0/(float)i - 1.0)) * 61.0 + 0.5));

    Wert 61L evtl. anpasssen, falls fuer K1 falsche Werte zurueckgegebn werden.
  */
  return ((10240000L / (long)i - 10000L) * MY_SWITCH_VALUE + 5000L) / 10000;
}
     6ca:	08 95       	ret

000006cc <StartSwitch>:
*****************************************************************************/
void StartSwitch (void)
{
	// ADC Wert von Switchen wird immer abgefragt
	// siehe ISRStandard() dort auch das handling von switched=TRUE
	cli ();
     6cc:	f8 94       	cli
	switched = FALSE;
     6ce:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <switched+0x1>
     6d2:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <switched>
	sei (); 
     6d6:	78 94       	sei
     6d8:	08 95       	ret

000006da <StopSwitch>:

  \par  Beispiel:
  (Nicht vorhanden)
*****************************************************************************/
void StopSwitch (void)
{
     6da:	08 95       	ret

000006dc <Sleep>:
  \endcode
*****************************************************************************/
void Sleep (
  unsigned char time36kHz)
{
  unsigned char ziel = (time36kHz + count36kHz) & 0x00FF;
     6dc:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <count36kHz>
     6e0:	89 0f       	add	r24, r25

  while (count36kHz != ziel)
     6e2:	90 91 c3 00 	lds	r25, 0x00C3	; 0x8000c3 <count36kHz>
     6e6:	89 13       	cpse	r24, r25
     6e8:	fc cf       	rjmp	.-8      	; 0x6e2 <Sleep+0x6>
    ;
}
     6ea:	08 95       	ret

000006ec <Msleep>:
  Msleep (1500);
  \endcode
*****************************************************************************/
void Msleep (
  unsigned int ms)
{
     6ec:	0f 93       	push	r16
     6ee:	1f 93       	push	r17
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
  unsigned int z;
  for (z = 0; z < ms; z++)
     6f4:	00 97       	sbiw	r24, 0x00	; 0
     6f6:	49 f0       	breq	.+18     	; 0x70a <Msleep+0x1e>
     6f8:	8c 01       	movw	r16, r24
     6fa:	c0 e0       	ldi	r28, 0x00	; 0
     6fc:	d0 e0       	ldi	r29, 0x00	; 0
    Sleep (36);
     6fe:	84 e2       	ldi	r24, 0x24	; 36
     700:	ed df       	rcall	.-38     	; 0x6dc <Sleep>
*****************************************************************************/
void Msleep (
  unsigned int ms)
{
  unsigned int z;
  for (z = 0; z < ms; z++)
     702:	21 96       	adiw	r28, 0x01	; 1
     704:	0c 17       	cp	r16, r28
     706:	1d 07       	cpc	r17, r29
     708:	d1 f7       	brne	.-12     	; 0x6fe <Msleep+0x12>
    Sleep (36);
}
     70a:	df 91       	pop	r29
     70c:	cf 91       	pop	r28
     70e:	1f 91       	pop	r17
     710:	0f 91       	pop	r16
     712:	08 95       	ret

00000714 <search>:
			Msleep(1000);
		}
	}
}
void find(){}
void scan(){}
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
     718:	00 d0       	rcall	.+0      	; 0x71a <search+0x6>
     71a:	00 d0       	rcall	.+0      	; 0x71c <search+0x8>
     71c:	cd b7       	in	r28, 0x3d	; 61
     71e:	de b7       	in	r29, 0x3e	; 62
     720:	85 ed       	ldi	r24, 0xD5	; 213
     722:	9d ef       	ldi	r25, 0xFD	; 253
     724:	8b df       	rcall	.-234    	; 0x63c <PrintInt>
     726:	ce 01       	movw	r24, r28
     728:	01 96       	adiw	r24, 0x01	; 1
     72a:	99 dc       	rcall	.-1742   	; 0x5e <LineData>
     72c:	46 e9       	ldi	r20, 0x96	; 150
     72e:	50 e0       	ldi	r21, 0x00	; 0
     730:	66 ea       	ldi	r22, 0xA6	; 166
     732:	7f ef       	ldi	r23, 0xFF	; 255
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	36 de       	rcall	.-916    	; 0x3a6 <GoTurn>
     73a:	88 ee       	ldi	r24, 0xE8	; 232
     73c:	93 e0       	ldi	r25, 0x03	; 3
     73e:	d6 df       	rcall	.-84     	; 0x6ec <Msleep>
     740:	ce 01       	movw	r24, r28
     742:	01 96       	adiw	r24, 0x01	; 1
     744:	8c dc       	rcall	.-1768   	; 0x5e <LineData>
     746:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <WHITE_SURFACE>
     74a:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <WHITE_SURFACE+0x1>
     74e:	29 81       	ldd	r18, Y+1	; 0x01
     750:	3a 81       	ldd	r19, Y+2	; 0x02
     752:	82 17       	cp	r24, r18
     754:	93 07       	cpc	r25, r19
     756:	28 f0       	brcs	.+10     	; 0x762 <search+0x4e>
     758:	2b 81       	ldd	r18, Y+3	; 0x03
     75a:	3c 81       	ldd	r19, Y+4	; 0x04
     75c:	82 17       	cp	r24, r18
     75e:	93 07       	cpc	r25, r19
     760:	c8 f4       	brcc	.+50     	; 0x794 <search+0x80>
     762:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <currentState>
     766:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <lastError>
     76a:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <lastError+0x1>
     76e:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <lastError+0x2>
     772:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <lastError+0x3>
     776:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <error>
     77a:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <error+0x1>
     77e:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <error+0x2>
     782:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <error+0x3>
     786:	60 e0       	ldi	r22, 0x00	; 0
     788:	81 e0       	ldi	r24, 0x01	; 1
     78a:	f0 de       	rcall	.-544    	; 0x56c <BackLED>
     78c:	88 ee       	ldi	r24, 0xE8	; 232
     78e:	93 e0       	ldi	r25, 0x03	; 3
     790:	ad df       	rcall	.-166    	; 0x6ec <Msleep>
     792:	47 c0       	rjmp	.+142    	; 0x822 <search+0x10e>
     794:	46 e9       	ldi	r20, 0x96	; 150
     796:	50 e0       	ldi	r21, 0x00	; 0
     798:	64 eb       	ldi	r22, 0xB4	; 180
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	80 e0       	ldi	r24, 0x00	; 0
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	02 de       	rcall	.-1020   	; 0x3a6 <GoTurn>
     7a2:	88 ee       	ldi	r24, 0xE8	; 232
     7a4:	93 e0       	ldi	r25, 0x03	; 3
     7a6:	a2 df       	rcall	.-188    	; 0x6ec <Msleep>
     7a8:	ce 01       	movw	r24, r28
     7aa:	01 96       	adiw	r24, 0x01	; 1
     7ac:	58 dc       	rcall	.-1872   	; 0x5e <LineData>
     7ae:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <WHITE_SURFACE>
     7b2:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <WHITE_SURFACE+0x1>
     7b6:	29 81       	ldd	r18, Y+1	; 0x01
     7b8:	3a 81       	ldd	r19, Y+2	; 0x02
     7ba:	82 17       	cp	r24, r18
     7bc:	93 07       	cpc	r25, r19
     7be:	28 f0       	brcs	.+10     	; 0x7ca <search+0xb6>
     7c0:	2b 81       	ldd	r18, Y+3	; 0x03
     7c2:	3c 81       	ldd	r19, Y+4	; 0x04
     7c4:	82 17       	cp	r24, r18
     7c6:	93 07       	cpc	r25, r19
     7c8:	c8 f4       	brcc	.+50     	; 0x7fc <search+0xe8>
     7ca:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <currentState>
     7ce:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <lastError>
     7d2:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <lastError+0x1>
     7d6:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <lastError+0x2>
     7da:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <lastError+0x3>
     7de:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <error>
     7e2:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <error+0x1>
     7e6:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <error+0x2>
     7ea:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <error+0x3>
     7ee:	61 e0       	ldi	r22, 0x01	; 1
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	bc de       	rcall	.-648    	; 0x56c <BackLED>
     7f4:	88 ee       	ldi	r24, 0xE8	; 232
     7f6:	93 e0       	ldi	r25, 0x03	; 3
     7f8:	79 df       	rcall	.-270    	; 0x6ec <Msleep>
     7fa:	13 c0       	rjmp	.+38     	; 0x822 <search+0x10e>
     7fc:	46 e9       	ldi	r20, 0x96	; 150
     7fe:	50 e0       	ldi	r21, 0x00	; 0
     800:	66 ea       	ldi	r22, 0xA6	; 166
     802:	7f ef       	ldi	r23, 0xFF	; 255
     804:	80 e0       	ldi	r24, 0x00	; 0
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	ce dd       	rcall	.-1124   	; 0x3a6 <GoTurn>
     80a:	88 ee       	ldi	r24, 0xE8	; 232
     80c:	93 e0       	ldi	r25, 0x03	; 3
     80e:	6e df       	rcall	.-292    	; 0x6ec <Msleep>
     810:	83 e0       	ldi	r24, 0x03	; 3
     812:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <currentState>
     816:	61 e0       	ldi	r22, 0x01	; 1
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	a8 de       	rcall	.-688    	; 0x56c <BackLED>
     81c:	88 ee       	ldi	r24, 0xE8	; 232
     81e:	93 e0       	ldi	r25, 0x03	; 3
     820:	65 df       	rcall	.-310    	; 0x6ec <Msleep>
     822:	0f 90       	pop	r0
     824:	0f 90       	pop	r0
     826:	0f 90       	pop	r0
     828:	0f 90       	pop	r0
     82a:	df 91       	pop	r29
     82c:	cf 91       	pop	r28
     82e:	08 95       	ret

00000830 <blinkNTimes>:
void blinkNTimes(){
     830:	cf 93       	push	r28
     832:	df 93       	push	r29
	for(int i = 0; i < barcodeCounter; ++i)
     834:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <barcodeCounter>
     838:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <barcodeCounter+0x1>
     83c:	18 16       	cp	r1, r24
     83e:	19 06       	cpc	r1, r25
     840:	c4 f4       	brge	.+48     	; 0x872 <blinkNTimes+0x42>
     842:	c0 e0       	ldi	r28, 0x00	; 0
     844:	d0 e0       	ldi	r29, 0x00	; 0
	{
		BackLED(ON,ON);
     846:	61 e0       	ldi	r22, 0x01	; 1
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	90 de       	rcall	.-736    	; 0x56c <BackLED>
		PrintInt(i);
     84c:	ce 01       	movw	r24, r28
     84e:	f6 de       	rcall	.-532    	; 0x63c <PrintInt>
		Msleep(1000);
     850:	88 ee       	ldi	r24, 0xE8	; 232
     852:	93 e0       	ldi	r25, 0x03	; 3
     854:	4b df       	rcall	.-362    	; 0x6ec <Msleep>
		BackLED(OFF,OFF);
     856:	60 e0       	ldi	r22, 0x00	; 0
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	88 de       	rcall	.-752    	; 0x56c <BackLED>
		Msleep(1000);
     85c:	88 ee       	ldi	r24, 0xE8	; 232
     85e:	93 e0       	ldi	r25, 0x03	; 3
     860:	45 df       	rcall	.-374    	; 0x6ec <Msleep>
	}
}
void find(){}
void scan(){}
void blinkNTimes(){
	for(int i = 0; i < barcodeCounter; ++i)
     862:	21 96       	adiw	r28, 0x01	; 1
     864:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <barcodeCounter>
     868:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <barcodeCounter+0x1>
     86c:	c8 17       	cp	r28, r24
     86e:	d9 07       	cpc	r29, r25
     870:	54 f3       	brlt	.-44     	; 0x846 <blinkNTimes+0x16>
		PrintInt(i);
		Msleep(1000);
		BackLED(OFF,OFF);
		Msleep(1000);
	}
	if(barcodeCounter == 1)
     872:	01 97       	sbiw	r24, 0x01	; 1
     874:	21 f4       	brne	.+8      	; 0x87e <blinkNTimes+0x4e>
		currentState = ENDSTATE;
     876:	85 e0       	ldi	r24, 0x05	; 5
     878:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <currentState>
     87c:	03 c0       	rjmp	.+6      	; 0x884 <blinkNTimes+0x54>
	else
		currentState = FINDLINE;
     87e:	82 e0       	ldi	r24, 0x02	; 2
     880:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <currentState>
	barcodeCounter = 0;
     884:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <barcodeCounter+0x1>
     888:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <barcodeCounter>
}
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	08 95       	ret

00000892 <avoidObstacle>:
void avoidObstacle(){
	BackLED(OFF, ON);
     892:	61 e0       	ldi	r22, 0x01	; 1
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	6a de       	rcall	.-812    	; 0x56c <BackLED>
	SetMotorPower(-100,-100);
     898:	6c e9       	ldi	r22, 0x9C	; 156
     89a:	8c e9       	ldi	r24, 0x9C	; 156
     89c:	81 de       	rcall	.-766    	; 0x5a0 <SetMotorPower>
	Msleep(500);
     89e:	84 ef       	ldi	r24, 0xF4	; 244
     8a0:	91 e0       	ldi	r25, 0x01	; 1
     8a2:	24 df       	rcall	.-440    	; 0x6ec <Msleep>
	currentState = LINEFOLLOW;
     8a4:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <currentState>
	StopSwitch();
     8a8:	18 df       	rcall	.-464    	; 0x6da <StopSwitch>
	switched = 0;
     8aa:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <switched+0x1>
     8ae:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <switched>
	lastError=error=0;
     8b2:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <error>
     8b6:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <error+0x1>
     8ba:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <error+0x2>
     8be:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <error+0x3>
     8c2:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <lastError>
     8c6:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <lastError+0x1>
     8ca:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <lastError+0x2>
     8ce:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <lastError+0x3>
     8d2:	08 95       	ret

000008d4 <lineFollowing>:
}


void lineFollowing(int line_position) {
     8d4:	8f 92       	push	r8
     8d6:	9f 92       	push	r9
     8d8:	af 92       	push	r10
     8da:	bf 92       	push	r11
     8dc:	cf 92       	push	r12
     8de:	df 92       	push	r13
     8e0:	ef 92       	push	r14
     8e2:	ff 92       	push	r15
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
     8e8:	ec 01       	movw	r28, r24
	switch(line_position) {
     8ea:	89 2b       	or	r24, r25
     8ec:	29 f0       	breq	.+10     	; 0x8f8 <lineFollowing+0x24>
     8ee:	c1 15       	cp	r28, r1
     8f0:	84 e0       	ldi	r24, 0x04	; 4
     8f2:	d8 07       	cpc	r29, r24
     8f4:	59 f0       	breq	.+22     	; 0x90c <lineFollowing+0x38>
     8f6:	14 c0       	rjmp	.+40     	; 0x920 <lineFollowing+0x4c>
		// rotate left
		case 0 :
			PrintInt(-1);
     8f8:	8f ef       	ldi	r24, 0xFF	; 255
     8fa:	9f ef       	ldi	r25, 0xFF	; 255
     8fc:	9f de       	rcall	.-706    	; 0x63c <PrintInt>
			MotorDir(RWD,FWD);
     8fe:	60 e2       	ldi	r22, 0x20	; 32
     900:	80 e1       	ldi	r24, 0x10	; 16
     902:	74 de       	rcall	.-792    	; 0x5ec <MotorDir>
			MotorSpeed(100,150);
     904:	66 e9       	ldi	r22, 0x96	; 150
     906:	84 e6       	ldi	r24, 0x64	; 100
     908:	6a de       	rcall	.-812    	; 0x5de <MotorSpeed>
			break;	
     90a:	c0 c0       	rjmp	.+384    	; 0xa8c <lineFollowing+0x1b8>
		//rotate right
		case 1024 :
			PrintInt(-2);
     90c:	8e ef       	ldi	r24, 0xFE	; 254
     90e:	9f ef       	ldi	r25, 0xFF	; 255
     910:	95 de       	rcall	.-726    	; 0x63c <PrintInt>
			MotorDir(FWD,RWD);
     912:	60 e1       	ldi	r22, 0x10	; 16
     914:	80 e2       	ldi	r24, 0x20	; 32
     916:	6a de       	rcall	.-812    	; 0x5ec <MotorDir>
			MotorSpeed(150,100);
     918:	64 e6       	ldi	r22, 0x64	; 100
     91a:	86 e9       	ldi	r24, 0x96	; 150
     91c:	60 de       	rcall	.-832    	; 0x5de <MotorSpeed>
			break;
     91e:	b6 c0       	rjmp	.+364    	; 0xa8c <lineFollowing+0x1b8>
		default :
			PrintInt(-3);
     920:	8d ef       	ldi	r24, 0xFD	; 253
     922:	9f ef       	ldi	r25, 0xFF	; 255
     924:	8b de       	rcall	.-746    	; 0x63c <PrintInt>
			error = (float)line_position - DARK_SURFACE;
     926:	be 01       	movw	r22, r28
     928:	dd 0f       	add	r29, r29
     92a:	88 0b       	sbc	r24, r24
     92c:	99 0b       	sbc	r25, r25
     92e:	e2 d1       	rcall	.+964    	; 0xcf4 <__floatsisf>
     930:	6b 01       	movw	r12, r22
     932:	7c 01       	movw	r14, r24
     934:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <DARK_SURFACE>
     938:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <DARK_SURFACE+0x1>
     93c:	07 2e       	mov	r0, r23
     93e:	00 0c       	add	r0, r0
     940:	88 0b       	sbc	r24, r24
     942:	99 0b       	sbc	r25, r25
     944:	d7 d1       	rcall	.+942    	; 0xcf4 <__floatsisf>
     946:	9b 01       	movw	r18, r22
     948:	ac 01       	movw	r20, r24
     94a:	c7 01       	movw	r24, r14
     94c:	b6 01       	movw	r22, r12
     94e:	36 d1       	rcall	.+620    	; 0xbbc <__subsf3>
     950:	6b 01       	movw	r12, r22
     952:	7c 01       	movw	r14, r24
     954:	60 93 a8 00 	sts	0x00A8, r22	; 0x8000a8 <error>
     958:	70 93 a9 00 	sts	0x00A9, r23	; 0x8000a9 <error+0x1>
     95c:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <error+0x2>
     960:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <error+0x3>
			kp = 0.5;
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	a0 e0       	ldi	r26, 0x00	; 0
     96a:	bf e3       	ldi	r27, 0x3F	; 63
     96c:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <kp>
     970:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <kp+0x1>
     974:	a0 93 9e 00 	sts	0x009E, r26	; 0x80009e <kp+0x2>
     978:	b0 93 9f 00 	sts	0x009F, r27	; 0x80009f <kp+0x3>
			kd = 1;
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	a0 e8       	ldi	r26, 0x80	; 128
     982:	bf e3       	ldi	r27, 0x3F	; 63
     984:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <kd>
     988:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <kd+0x1>
     98c:	a0 93 9a 00 	sts	0x009A, r26	; 0x80009a <kd+0x2>
     990:	b0 93 9b 00 	sts	0x009B, r27	; 0x80009b <kd+0x3>

			PV = kp*error + kd*(error-lastError);
     994:	20 91 a4 00 	lds	r18, 0x00A4	; 0x8000a4 <lastError>
     998:	30 91 a5 00 	lds	r19, 0x00A5	; 0x8000a5 <lastError+0x1>
     99c:	40 91 a6 00 	lds	r20, 0x00A6	; 0x8000a6 <lastError+0x2>
     9a0:	50 91 a7 00 	lds	r21, 0x00A7	; 0x8000a7 <lastError+0x3>
     9a4:	c7 01       	movw	r24, r14
     9a6:	b6 01       	movw	r22, r12
     9a8:	09 d1       	rcall	.+530    	; 0xbbc <__subsf3>
     9aa:	4b 01       	movw	r8, r22
     9ac:	5c 01       	movw	r10, r24
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	5f e3       	ldi	r21, 0x3F	; 63
     9b6:	c7 01       	movw	r24, r14
     9b8:	b6 01       	movw	r22, r12
     9ba:	50 d2       	rcall	.+1184   	; 0xe5c <__mulsf3>
     9bc:	9b 01       	movw	r18, r22
     9be:	ac 01       	movw	r20, r24
     9c0:	c5 01       	movw	r24, r10
     9c2:	b4 01       	movw	r22, r8
     9c4:	fc d0       	rcall	.+504    	; 0xbbe <__addsf3>
     9c6:	4b 01       	movw	r8, r22
     9c8:	5c 01       	movw	r10, r24
     9ca:	60 93 a0 00 	sts	0x00A0, r22	; 0x8000a0 <PV>
     9ce:	70 93 a1 00 	sts	0x00A1, r23	; 0x8000a1 <PV+0x1>
     9d2:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <PV+0x2>
     9d6:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <PV+0x3>
			lastError = error;
     9da:	c0 92 a4 00 	sts	0x00A4, r12	; 0x8000a4 <lastError>
     9de:	d0 92 a5 00 	sts	0x00A5, r13	; 0x8000a5 <lastError+0x1>
     9e2:	e0 92 a6 00 	sts	0x00A6, r14	; 0x8000a6 <lastError+0x2>
     9e6:	f0 92 a7 00 	sts	0x00A7, r15	; 0x8000a7 <lastError+0x3>

			if(PV > 55)
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	4c e5       	ldi	r20, 0x5C	; 92
     9f0:	52 e4       	ldi	r21, 0x42	; 66
     9f2:	30 d2       	rcall	.+1120   	; 0xe54 <__gesf2>
     9f4:	18 16       	cp	r1, r24
     9f6:	6c f4       	brge	.+26     	; 0xa12 <lineFollowing+0x13e>
				PV=55;
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	ac e5       	ldi	r26, 0x5C	; 92
     9fe:	b2 e4       	ldi	r27, 0x42	; 66
     a00:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <PV>
     a04:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <PV+0x1>
     a08:	a0 93 a2 00 	sts	0x00A2, r26	; 0x8000a2 <PV+0x2>
     a0c:	b0 93 a3 00 	sts	0x00A3, r27	; 0x8000a3 <PV+0x3>
     a10:	15 c0       	rjmp	.+42     	; 0xa3c <lineFollowing+0x168>
			else
				if (PV < -55)
     a12:	20 e0       	ldi	r18, 0x00	; 0
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	4c e5       	ldi	r20, 0x5C	; 92
     a18:	52 ec       	ldi	r21, 0xC2	; 194
     a1a:	c5 01       	movw	r24, r10
     a1c:	b4 01       	movw	r22, r8
     a1e:	33 d1       	rcall	.+614    	; 0xc86 <__cmpsf2>
     a20:	88 23       	and	r24, r24
     a22:	64 f4       	brge	.+24     	; 0xa3c <lineFollowing+0x168>
					PV = -55;
     a24:	80 e0       	ldi	r24, 0x00	; 0
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	ac e5       	ldi	r26, 0x5C	; 92
     a2a:	b2 ec       	ldi	r27, 0xC2	; 194
     a2c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <PV>
     a30:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <PV+0x1>
     a34:	a0 93 a2 00 	sts	0x00A2, r26	; 0x8000a2 <PV+0x2>
     a38:	b0 93 a3 00 	sts	0x00A3, r27	; 0x8000a3 <PV+0x3>
			m1Speed = 150 + PV;
     a3c:	c0 90 a0 00 	lds	r12, 0x00A0	; 0x8000a0 <PV>
     a40:	d0 90 a1 00 	lds	r13, 0x00A1	; 0x8000a1 <PV+0x1>
     a44:	e0 90 a2 00 	lds	r14, 0x00A2	; 0x8000a2 <PV+0x2>
     a48:	f0 90 a3 00 	lds	r15, 0x00A3	; 0x8000a3 <PV+0x3>
     a4c:	20 e0       	ldi	r18, 0x00	; 0
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	46 e1       	ldi	r20, 0x16	; 22
     a52:	53 e4       	ldi	r21, 0x43	; 67
     a54:	c7 01       	movw	r24, r14
     a56:	b6 01       	movw	r22, r12
     a58:	b2 d0       	rcall	.+356    	; 0xbbe <__addsf3>
     a5a:	19 d1       	rcall	.+562    	; 0xc8e <__fixsfsi>
     a5c:	70 93 97 00 	sts	0x0097, r23	; 0x800097 <m1Speed+0x1>
     a60:	60 93 96 00 	sts	0x0096, r22	; 0x800096 <m1Speed>
			m2Speed = 150 - PV;
     a64:	a7 01       	movw	r20, r14
     a66:	96 01       	movw	r18, r12
     a68:	60 e0       	ldi	r22, 0x00	; 0
     a6a:	70 e0       	ldi	r23, 0x00	; 0
     a6c:	86 e1       	ldi	r24, 0x16	; 22
     a6e:	93 e4       	ldi	r25, 0x43	; 67
     a70:	a5 d0       	rcall	.+330    	; 0xbbc <__subsf3>
     a72:	0d d1       	rcall	.+538    	; 0xc8e <__fixsfsi>
     a74:	70 93 95 00 	sts	0x0095, r23	; 0x800095 <m2Speed+0x1>
     a78:	60 93 94 00 	sts	0x0094, r22	; 0x800094 <m2Speed>
			MotorDir(FWD,FWD);
     a7c:	60 e2       	ldi	r22, 0x20	; 32
     a7e:	80 e2       	ldi	r24, 0x20	; 32
     a80:	b5 dd       	rcall	.-1174   	; 0x5ec <MotorDir>
			MotorSpeed(m1Speed,m2Speed);
     a82:	60 91 94 00 	lds	r22, 0x0094	; 0x800094 <m2Speed>
     a86:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <m1Speed>
     a8a:	a9 dd       	rcall	.-1198   	; 0x5de <MotorSpeed>
			break;				
	}
}
     a8c:	df 91       	pop	r29
     a8e:	cf 91       	pop	r28
     a90:	ff 90       	pop	r15
     a92:	ef 90       	pop	r14
     a94:	df 90       	pop	r13
     a96:	cf 90       	pop	r12
     a98:	bf 90       	pop	r11
     a9a:	af 90       	pop	r10
     a9c:	9f 90       	pop	r9
     a9e:	8f 90       	pop	r8
     aa0:	08 95       	ret

00000aa2 <follow>:
	PrintInt(WHITE_SURFACE);SerPrint(" white");
	PrintInt(DARK_SURFACE);SerPrint(" dark\n");
}

void follow()
{
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
     aa6:	00 d0       	rcall	.+0      	; 0xaa8 <follow+0x6>
     aa8:	00 d0       	rcall	.+0      	; 0xaaa <follow+0x8>
     aaa:	cd b7       	in	r28, 0x3d	; 61
     aac:	de b7       	in	r29, 0x3e	; 62
	FrontLED(ON);
     aae:	81 e0       	ldi	r24, 0x01	; 1
     ab0:	54 dd       	rcall	.-1368   	; 0x55a <FrontLED>
	PrintInt(101);
     ab2:	85 e6       	ldi	r24, 0x65	; 101
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	c2 dd       	rcall	.-1148   	; 0x63c <PrintInt>
	unsigned int line_data[2];
	LineData(line_data);
     ab8:	ce 01       	movw	r24, r28
     aba:	01 96       	adiw	r24, 0x01	; 1
     abc:	d0 da       	rcall	.-2656   	; 0x5e <LineData>
	PrintInt(line_data[0]);SerPrint(" left");
     abe:	89 81       	ldd	r24, Y+1	; 0x01
     ac0:	9a 81       	ldd	r25, Y+2	; 0x02
     ac2:	bc dd       	rcall	.-1160   	; 0x63c <PrintInt>
     ac4:	8c e7       	ldi	r24, 0x7C	; 124
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a4 dd       	rcall	.-1208   	; 0x612 <SerPrint>
	PrintInt(line_data[1]);SerPrint(" right\n");	
     aca:	8b 81       	ldd	r24, Y+3	; 0x03
     acc:	9c 81       	ldd	r25, Y+4	; 0x04
     ace:	b6 dd       	rcall	.-1172   	; 0x63c <PrintInt>
     ad0:	82 e8       	ldi	r24, 0x82	; 130
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	9e dd       	rcall	.-1220   	; 0x612 <SerPrint>
	if(PollSwitch() > 0) 
     ad6:	cd dd       	rcall	.-1126   	; 0x672 <PollSwitch>
     ad8:	88 23       	and	r24, r24
     ada:	21 f0       	breq	.+8      	; 0xae4 <follow+0x42>
	{
		//transition to PollSwitch
	//	currentState = OBSTACLE;
		SetMotorPower(0,0);
     adc:	60 e0       	ldi	r22, 0x00	; 0
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	5f dd       	rcall	.-1346   	; 0x5a0 <SetMotorPower>
     ae2:	4b c0       	rjmp	.+150    	; 0xb7a <follow+0xd8>
	}
	else
		if (line_data[0] > WHITE_SURFACE && line_data[1] > WHITE_SURFACE)
     ae4:	29 81       	ldd	r18, Y+1	; 0x01
     ae6:	3a 81       	ldd	r19, Y+2	; 0x02
     ae8:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <WHITE_SURFACE>
     aec:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <WHITE_SURFACE+0x1>
     af0:	82 17       	cp	r24, r18
     af2:	93 07       	cpc	r25, r19
     af4:	78 f4       	brcc	.+30     	; 0xb14 <follow+0x72>
     af6:	4b 81       	ldd	r20, Y+3	; 0x03
     af8:	5c 81       	ldd	r21, Y+4	; 0x04
     afa:	84 17       	cp	r24, r20
     afc:	95 07       	cpc	r25, r21
     afe:	80 f5       	brcc	.+96     	; 0xb60 <follow+0xbe>
		{
			PrintInt(-666);
     b00:	86 e6       	ldi	r24, 0x66	; 102
     b02:	9d ef       	ldi	r25, 0xFD	; 253
     b04:	9b dd       	rcall	.-1226   	; 0x63c <PrintInt>
			//transition to SearchLine
			currentState = SEARCHLINE;
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <currentState>
			SetMotorPower(0,0);
     b0c:	60 e0       	ldi	r22, 0x00	; 0
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	47 dd       	rcall	.-1394   	; 0x5a0 <SetMotorPower>
     b12:	33 c0       	rjmp	.+102    	; 0xb7a <follow+0xd8>
		}
		else {
			line_position = 0;
     b14:	10 92 93 00 	sts	0x0093, r1	; 0x800093 <line_position+0x1>
     b18:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <line_position>
			if (line_data[0] < DARK_SURFACE && line_data[1] > WHITE_SURFACE)
     b1c:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <DARK_SURFACE>
     b20:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <DARK_SURFACE+0x1>
     b24:	24 17       	cp	r18, r20
     b26:	35 07       	cpc	r19, r21
     b28:	28 f5       	brcc	.+74     	; 0xb74 <follow+0xd2>
     b2a:	4b 81       	ldd	r20, Y+3	; 0x03
     b2c:	5c 81       	ldd	r21, Y+4	; 0x04
     b2e:	84 17       	cp	r24, r20
     b30:	95 07       	cpc	r25, r21
     b32:	80 f0       	brcs	.+32     	; 0xb54 <follow+0xb2>
     b34:	1f c0       	rjmp	.+62     	; 0xb74 <follow+0xd2>
				line_position = 0;
			else
			{
				if(line_data[1] < DARK_SURFACE && line_data[0] > WHITE_SURFACE)
					line_position = 1024;
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	94 e0       	ldi	r25, 0x04	; 4
     b3a:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <line_position+0x1>
     b3e:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <line_position>
     b42:	08 c0       	rjmp	.+16     	; 0xb54 <follow+0xb2>
				else
					line_position = (line_data[0]+line_data[1])/2;
     b44:	82 0f       	add	r24, r18
     b46:	93 1f       	adc	r25, r19
     b48:	96 95       	lsr	r25
     b4a:	87 95       	ror	r24
     b4c:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <line_position+0x1>
     b50:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <line_position>
			}
			lineFollowing(line_position);
     b54:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <line_position>
     b58:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <line_position+0x1>
     b5c:	bb de       	rcall	.-650    	; 0x8d4 <lineFollowing>
		}
}
     b5e:	0d c0       	rjmp	.+26     	; 0xb7a <follow+0xd8>
			line_position = 0;
			if (line_data[0] < DARK_SURFACE && line_data[1] > WHITE_SURFACE)
				line_position = 0;
			else
			{
				if(line_data[1] < DARK_SURFACE && line_data[0] > WHITE_SURFACE)
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	9c 81       	ldd	r25, Y+4	; 0x04
     b64:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <DARK_SURFACE>
     b68:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <DARK_SURFACE+0x1>
     b6c:	84 17       	cp	r24, r20
     b6e:	95 07       	cpc	r25, r21
     b70:	48 f7       	brcc	.-46     	; 0xb44 <follow+0xa2>
     b72:	e1 cf       	rjmp	.-62     	; 0xb36 <follow+0x94>
     b74:	8b 81       	ldd	r24, Y+3	; 0x03
     b76:	9c 81       	ldd	r25, Y+4	; 0x04
     b78:	e5 cf       	rjmp	.-54     	; 0xb44 <follow+0xa2>
				else
					line_position = (line_data[0]+line_data[1])/2;
			}
			lineFollowing(line_position);
		}
}
     b7a:	0f 90       	pop	r0
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	0f 90       	pop	r0
     b82:	df 91       	pop	r29
     b84:	cf 91       	pop	r28
     b86:	08 95       	ret

00000b88 <main>:
void avoidObstacle(void);
void Calibration(int n, int pause);

int main (void)
{
	Init();
     b88:	2e db       	rcall	.-2468   	; 0x1e6 <Init>
	EncoderInit();
     b8a:	bd dc       	rcall	.-1670   	; 0x506 <EncoderInit>
	//Calibration(5,200);
	StartSwitch();
     b8c:	9f dd       	rcall	.-1218   	; 0x6cc <StartSwitch>
	while(currentState != ENDSTATE) 
     b8e:	0f c0       	rjmp	.+30     	; 0xbae <main+0x26>
	{
		switch(currentState) {
     b90:	81 30       	cpi	r24, 0x01	; 1
     b92:	41 f0       	breq	.+16     	; 0xba4 <main+0x1c>
     b94:	28 f0       	brcs	.+10     	; 0xba0 <main+0x18>
     b96:	84 30       	cpi	r24, 0x04	; 4
     b98:	39 f0       	breq	.+14     	; 0xba8 <main+0x20>
     b9a:	86 30       	cpi	r24, 0x06	; 6
     b9c:	39 f0       	breq	.+14     	; 0xbac <main+0x24>
     b9e:	09 c0       	rjmp	.+18     	; 0xbb2 <main+0x2a>
			case LINEFOLLOW :
				follow();
     ba0:	80 df       	rcall	.-256    	; 0xaa2 <follow>
				break;
     ba2:	05 c0       	rjmp	.+10     	; 0xbae <main+0x26>
			case SEARCHLINE :
				search();
     ba4:	b7 dd       	rcall	.-1170   	; 0x714 <search>
				break;
     ba6:	03 c0       	rjmp	.+6      	; 0xbae <main+0x26>
				break;
			case SCANBARCODE :
				scan();
				break;
			case BLINK :
				blinkNTimes();
     ba8:	43 de       	rcall	.-890    	; 0x830 <blinkNTimes>
				break;
     baa:	01 c0       	rjmp	.+2      	; 0xbae <main+0x26>
			case OBSTACLE :
				avoidObstacle();
     bac:	72 de       	rcall	.-796    	; 0x892 <avoidObstacle>
{
	Init();
	EncoderInit();
	//Calibration(5,200);
	StartSwitch();
	while(currentState != ENDSTATE) 
     bae:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <currentState>
     bb2:	85 30       	cpi	r24, 0x05	; 5
     bb4:	69 f7       	brne	.-38     	; 0xb90 <main+0x8>
			default:
				break;
		}
	}
	return 0;
}
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	08 95       	ret

00000bbc <__subsf3>:
     bbc:	50 58       	subi	r21, 0x80	; 128

00000bbe <__addsf3>:
     bbe:	bb 27       	eor	r27, r27
     bc0:	aa 27       	eor	r26, r26
     bc2:	0e d0       	rcall	.+28     	; 0xbe0 <__addsf3x>
     bc4:	0d c1       	rjmp	.+538    	; 0xde0 <__fp_round>
     bc6:	fe d0       	rcall	.+508    	; 0xdc4 <__fp_pscA>
     bc8:	30 f0       	brcs	.+12     	; 0xbd6 <__addsf3+0x18>
     bca:	03 d1       	rcall	.+518    	; 0xdd2 <__fp_pscB>
     bcc:	20 f0       	brcs	.+8      	; 0xbd6 <__addsf3+0x18>
     bce:	31 f4       	brne	.+12     	; 0xbdc <__addsf3+0x1e>
     bd0:	9f 3f       	cpi	r25, 0xFF	; 255
     bd2:	11 f4       	brne	.+4      	; 0xbd8 <__addsf3+0x1a>
     bd4:	1e f4       	brtc	.+6      	; 0xbdc <__addsf3+0x1e>
     bd6:	f3 c0       	rjmp	.+486    	; 0xdbe <__fp_nan>
     bd8:	0e f4       	brtc	.+2      	; 0xbdc <__addsf3+0x1e>
     bda:	e0 95       	com	r30
     bdc:	e7 fb       	bst	r30, 7
     bde:	e9 c0       	rjmp	.+466    	; 0xdb2 <__fp_inf>

00000be0 <__addsf3x>:
     be0:	e9 2f       	mov	r30, r25
     be2:	0f d1       	rcall	.+542    	; 0xe02 <__fp_split3>
     be4:	80 f3       	brcs	.-32     	; 0xbc6 <__addsf3+0x8>
     be6:	ba 17       	cp	r27, r26
     be8:	62 07       	cpc	r22, r18
     bea:	73 07       	cpc	r23, r19
     bec:	84 07       	cpc	r24, r20
     bee:	95 07       	cpc	r25, r21
     bf0:	18 f0       	brcs	.+6      	; 0xbf8 <__addsf3x+0x18>
     bf2:	71 f4       	brne	.+28     	; 0xc10 <__addsf3x+0x30>
     bf4:	9e f5       	brtc	.+102    	; 0xc5c <__addsf3x+0x7c>
     bf6:	27 c1       	rjmp	.+590    	; 0xe46 <__fp_zero>
     bf8:	0e f4       	brtc	.+2      	; 0xbfc <__addsf3x+0x1c>
     bfa:	e0 95       	com	r30
     bfc:	0b 2e       	mov	r0, r27
     bfe:	ba 2f       	mov	r27, r26
     c00:	a0 2d       	mov	r26, r0
     c02:	0b 01       	movw	r0, r22
     c04:	b9 01       	movw	r22, r18
     c06:	90 01       	movw	r18, r0
     c08:	0c 01       	movw	r0, r24
     c0a:	ca 01       	movw	r24, r20
     c0c:	a0 01       	movw	r20, r0
     c0e:	11 24       	eor	r1, r1
     c10:	ff 27       	eor	r31, r31
     c12:	59 1b       	sub	r21, r25
     c14:	99 f0       	breq	.+38     	; 0xc3c <__addsf3x+0x5c>
     c16:	59 3f       	cpi	r21, 0xF9	; 249
     c18:	50 f4       	brcc	.+20     	; 0xc2e <__addsf3x+0x4e>
     c1a:	50 3e       	cpi	r21, 0xE0	; 224
     c1c:	68 f1       	brcs	.+90     	; 0xc78 <__addsf3x+0x98>
     c1e:	1a 16       	cp	r1, r26
     c20:	f0 40       	sbci	r31, 0x00	; 0
     c22:	a2 2f       	mov	r26, r18
     c24:	23 2f       	mov	r18, r19
     c26:	34 2f       	mov	r19, r20
     c28:	44 27       	eor	r20, r20
     c2a:	58 5f       	subi	r21, 0xF8	; 248
     c2c:	f3 cf       	rjmp	.-26     	; 0xc14 <__addsf3x+0x34>
     c2e:	46 95       	lsr	r20
     c30:	37 95       	ror	r19
     c32:	27 95       	ror	r18
     c34:	a7 95       	ror	r26
     c36:	f0 40       	sbci	r31, 0x00	; 0
     c38:	53 95       	inc	r21
     c3a:	c9 f7       	brne	.-14     	; 0xc2e <__addsf3x+0x4e>
     c3c:	7e f4       	brtc	.+30     	; 0xc5c <__addsf3x+0x7c>
     c3e:	1f 16       	cp	r1, r31
     c40:	ba 0b       	sbc	r27, r26
     c42:	62 0b       	sbc	r22, r18
     c44:	73 0b       	sbc	r23, r19
     c46:	84 0b       	sbc	r24, r20
     c48:	ba f0       	brmi	.+46     	; 0xc78 <__addsf3x+0x98>
     c4a:	91 50       	subi	r25, 0x01	; 1
     c4c:	a1 f0       	breq	.+40     	; 0xc76 <__addsf3x+0x96>
     c4e:	ff 0f       	add	r31, r31
     c50:	bb 1f       	adc	r27, r27
     c52:	66 1f       	adc	r22, r22
     c54:	77 1f       	adc	r23, r23
     c56:	88 1f       	adc	r24, r24
     c58:	c2 f7       	brpl	.-16     	; 0xc4a <__addsf3x+0x6a>
     c5a:	0e c0       	rjmp	.+28     	; 0xc78 <__addsf3x+0x98>
     c5c:	ba 0f       	add	r27, r26
     c5e:	62 1f       	adc	r22, r18
     c60:	73 1f       	adc	r23, r19
     c62:	84 1f       	adc	r24, r20
     c64:	48 f4       	brcc	.+18     	; 0xc78 <__addsf3x+0x98>
     c66:	87 95       	ror	r24
     c68:	77 95       	ror	r23
     c6a:	67 95       	ror	r22
     c6c:	b7 95       	ror	r27
     c6e:	f7 95       	ror	r31
     c70:	9e 3f       	cpi	r25, 0xFE	; 254
     c72:	08 f0       	brcs	.+2      	; 0xc76 <__addsf3x+0x96>
     c74:	b3 cf       	rjmp	.-154    	; 0xbdc <__addsf3+0x1e>
     c76:	93 95       	inc	r25
     c78:	88 0f       	add	r24, r24
     c7a:	08 f0       	brcs	.+2      	; 0xc7e <__addsf3x+0x9e>
     c7c:	99 27       	eor	r25, r25
     c7e:	ee 0f       	add	r30, r30
     c80:	97 95       	ror	r25
     c82:	87 95       	ror	r24
     c84:	08 95       	ret

00000c86 <__cmpsf2>:
     c86:	71 d0       	rcall	.+226    	; 0xd6a <__fp_cmp>
     c88:	08 f4       	brcc	.+2      	; 0xc8c <__cmpsf2+0x6>
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	08 95       	ret

00000c8e <__fixsfsi>:
     c8e:	04 d0       	rcall	.+8      	; 0xc98 <__fixunssfsi>
     c90:	68 94       	set
     c92:	b1 11       	cpse	r27, r1
     c94:	d9 c0       	rjmp	.+434    	; 0xe48 <__fp_szero>
     c96:	08 95       	ret

00000c98 <__fixunssfsi>:
     c98:	bc d0       	rcall	.+376    	; 0xe12 <__fp_splitA>
     c9a:	88 f0       	brcs	.+34     	; 0xcbe <__fixunssfsi+0x26>
     c9c:	9f 57       	subi	r25, 0x7F	; 127
     c9e:	90 f0       	brcs	.+36     	; 0xcc4 <__fixunssfsi+0x2c>
     ca0:	b9 2f       	mov	r27, r25
     ca2:	99 27       	eor	r25, r25
     ca4:	b7 51       	subi	r27, 0x17	; 23
     ca6:	a0 f0       	brcs	.+40     	; 0xcd0 <__fixunssfsi+0x38>
     ca8:	d1 f0       	breq	.+52     	; 0xcde <__fixunssfsi+0x46>
     caa:	66 0f       	add	r22, r22
     cac:	77 1f       	adc	r23, r23
     cae:	88 1f       	adc	r24, r24
     cb0:	99 1f       	adc	r25, r25
     cb2:	1a f0       	brmi	.+6      	; 0xcba <__fixunssfsi+0x22>
     cb4:	ba 95       	dec	r27
     cb6:	c9 f7       	brne	.-14     	; 0xcaa <__fixunssfsi+0x12>
     cb8:	12 c0       	rjmp	.+36     	; 0xcde <__fixunssfsi+0x46>
     cba:	b1 30       	cpi	r27, 0x01	; 1
     cbc:	81 f0       	breq	.+32     	; 0xcde <__fixunssfsi+0x46>
     cbe:	c3 d0       	rcall	.+390    	; 0xe46 <__fp_zero>
     cc0:	b1 e0       	ldi	r27, 0x01	; 1
     cc2:	08 95       	ret
     cc4:	c0 c0       	rjmp	.+384    	; 0xe46 <__fp_zero>
     cc6:	67 2f       	mov	r22, r23
     cc8:	78 2f       	mov	r23, r24
     cca:	88 27       	eor	r24, r24
     ccc:	b8 5f       	subi	r27, 0xF8	; 248
     cce:	39 f0       	breq	.+14     	; 0xcde <__fixunssfsi+0x46>
     cd0:	b9 3f       	cpi	r27, 0xF9	; 249
     cd2:	cc f3       	brlt	.-14     	; 0xcc6 <__fixunssfsi+0x2e>
     cd4:	86 95       	lsr	r24
     cd6:	77 95       	ror	r23
     cd8:	67 95       	ror	r22
     cda:	b3 95       	inc	r27
     cdc:	d9 f7       	brne	.-10     	; 0xcd4 <__fixunssfsi+0x3c>
     cde:	3e f4       	brtc	.+14     	; 0xcee <__fixunssfsi+0x56>
     ce0:	90 95       	com	r25
     ce2:	80 95       	com	r24
     ce4:	70 95       	com	r23
     ce6:	61 95       	neg	r22
     ce8:	7f 4f       	sbci	r23, 0xFF	; 255
     cea:	8f 4f       	sbci	r24, 0xFF	; 255
     cec:	9f 4f       	sbci	r25, 0xFF	; 255
     cee:	08 95       	ret

00000cf0 <__floatunsisf>:
     cf0:	e8 94       	clt
     cf2:	09 c0       	rjmp	.+18     	; 0xd06 <__floatsisf+0x12>

00000cf4 <__floatsisf>:
     cf4:	97 fb       	bst	r25, 7
     cf6:	3e f4       	brtc	.+14     	; 0xd06 <__floatsisf+0x12>
     cf8:	90 95       	com	r25
     cfa:	80 95       	com	r24
     cfc:	70 95       	com	r23
     cfe:	61 95       	neg	r22
     d00:	7f 4f       	sbci	r23, 0xFF	; 255
     d02:	8f 4f       	sbci	r24, 0xFF	; 255
     d04:	9f 4f       	sbci	r25, 0xFF	; 255
     d06:	99 23       	and	r25, r25
     d08:	a9 f0       	breq	.+42     	; 0xd34 <__floatsisf+0x40>
     d0a:	f9 2f       	mov	r31, r25
     d0c:	96 e9       	ldi	r25, 0x96	; 150
     d0e:	bb 27       	eor	r27, r27
     d10:	93 95       	inc	r25
     d12:	f6 95       	lsr	r31
     d14:	87 95       	ror	r24
     d16:	77 95       	ror	r23
     d18:	67 95       	ror	r22
     d1a:	b7 95       	ror	r27
     d1c:	f1 11       	cpse	r31, r1
     d1e:	f8 cf       	rjmp	.-16     	; 0xd10 <__floatsisf+0x1c>
     d20:	fa f4       	brpl	.+62     	; 0xd60 <__floatsisf+0x6c>
     d22:	bb 0f       	add	r27, r27
     d24:	11 f4       	brne	.+4      	; 0xd2a <__floatsisf+0x36>
     d26:	60 ff       	sbrs	r22, 0
     d28:	1b c0       	rjmp	.+54     	; 0xd60 <__floatsisf+0x6c>
     d2a:	6f 5f       	subi	r22, 0xFF	; 255
     d2c:	7f 4f       	sbci	r23, 0xFF	; 255
     d2e:	8f 4f       	sbci	r24, 0xFF	; 255
     d30:	9f 4f       	sbci	r25, 0xFF	; 255
     d32:	16 c0       	rjmp	.+44     	; 0xd60 <__floatsisf+0x6c>
     d34:	88 23       	and	r24, r24
     d36:	11 f0       	breq	.+4      	; 0xd3c <__floatsisf+0x48>
     d38:	96 e9       	ldi	r25, 0x96	; 150
     d3a:	11 c0       	rjmp	.+34     	; 0xd5e <__floatsisf+0x6a>
     d3c:	77 23       	and	r23, r23
     d3e:	21 f0       	breq	.+8      	; 0xd48 <__floatsisf+0x54>
     d40:	9e e8       	ldi	r25, 0x8E	; 142
     d42:	87 2f       	mov	r24, r23
     d44:	76 2f       	mov	r23, r22
     d46:	05 c0       	rjmp	.+10     	; 0xd52 <__floatsisf+0x5e>
     d48:	66 23       	and	r22, r22
     d4a:	71 f0       	breq	.+28     	; 0xd68 <__floatsisf+0x74>
     d4c:	96 e8       	ldi	r25, 0x86	; 134
     d4e:	86 2f       	mov	r24, r22
     d50:	70 e0       	ldi	r23, 0x00	; 0
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	2a f0       	brmi	.+10     	; 0xd60 <__floatsisf+0x6c>
     d56:	9a 95       	dec	r25
     d58:	66 0f       	add	r22, r22
     d5a:	77 1f       	adc	r23, r23
     d5c:	88 1f       	adc	r24, r24
     d5e:	da f7       	brpl	.-10     	; 0xd56 <__floatsisf+0x62>
     d60:	88 0f       	add	r24, r24
     d62:	96 95       	lsr	r25
     d64:	87 95       	ror	r24
     d66:	97 f9       	bld	r25, 7
     d68:	08 95       	ret

00000d6a <__fp_cmp>:
     d6a:	99 0f       	add	r25, r25
     d6c:	00 08       	sbc	r0, r0
     d6e:	55 0f       	add	r21, r21
     d70:	aa 0b       	sbc	r26, r26
     d72:	e0 e8       	ldi	r30, 0x80	; 128
     d74:	fe ef       	ldi	r31, 0xFE	; 254
     d76:	16 16       	cp	r1, r22
     d78:	17 06       	cpc	r1, r23
     d7a:	e8 07       	cpc	r30, r24
     d7c:	f9 07       	cpc	r31, r25
     d7e:	c0 f0       	brcs	.+48     	; 0xdb0 <__fp_cmp+0x46>
     d80:	12 16       	cp	r1, r18
     d82:	13 06       	cpc	r1, r19
     d84:	e4 07       	cpc	r30, r20
     d86:	f5 07       	cpc	r31, r21
     d88:	98 f0       	brcs	.+38     	; 0xdb0 <__fp_cmp+0x46>
     d8a:	62 1b       	sub	r22, r18
     d8c:	73 0b       	sbc	r23, r19
     d8e:	84 0b       	sbc	r24, r20
     d90:	95 0b       	sbc	r25, r21
     d92:	39 f4       	brne	.+14     	; 0xda2 <__fp_cmp+0x38>
     d94:	0a 26       	eor	r0, r26
     d96:	61 f0       	breq	.+24     	; 0xdb0 <__fp_cmp+0x46>
     d98:	23 2b       	or	r18, r19
     d9a:	24 2b       	or	r18, r20
     d9c:	25 2b       	or	r18, r21
     d9e:	21 f4       	brne	.+8      	; 0xda8 <__fp_cmp+0x3e>
     da0:	08 95       	ret
     da2:	0a 26       	eor	r0, r26
     da4:	09 f4       	brne	.+2      	; 0xda8 <__fp_cmp+0x3e>
     da6:	a1 40       	sbci	r26, 0x01	; 1
     da8:	a6 95       	lsr	r26
     daa:	8f ef       	ldi	r24, 0xFF	; 255
     dac:	81 1d       	adc	r24, r1
     dae:	81 1d       	adc	r24, r1
     db0:	08 95       	ret

00000db2 <__fp_inf>:
     db2:	97 f9       	bld	r25, 7
     db4:	9f 67       	ori	r25, 0x7F	; 127
     db6:	80 e8       	ldi	r24, 0x80	; 128
     db8:	70 e0       	ldi	r23, 0x00	; 0
     dba:	60 e0       	ldi	r22, 0x00	; 0
     dbc:	08 95       	ret

00000dbe <__fp_nan>:
     dbe:	9f ef       	ldi	r25, 0xFF	; 255
     dc0:	80 ec       	ldi	r24, 0xC0	; 192
     dc2:	08 95       	ret

00000dc4 <__fp_pscA>:
     dc4:	00 24       	eor	r0, r0
     dc6:	0a 94       	dec	r0
     dc8:	16 16       	cp	r1, r22
     dca:	17 06       	cpc	r1, r23
     dcc:	18 06       	cpc	r1, r24
     dce:	09 06       	cpc	r0, r25
     dd0:	08 95       	ret

00000dd2 <__fp_pscB>:
     dd2:	00 24       	eor	r0, r0
     dd4:	0a 94       	dec	r0
     dd6:	12 16       	cp	r1, r18
     dd8:	13 06       	cpc	r1, r19
     dda:	14 06       	cpc	r1, r20
     ddc:	05 06       	cpc	r0, r21
     dde:	08 95       	ret

00000de0 <__fp_round>:
     de0:	09 2e       	mov	r0, r25
     de2:	03 94       	inc	r0
     de4:	00 0c       	add	r0, r0
     de6:	11 f4       	brne	.+4      	; 0xdec <__fp_round+0xc>
     de8:	88 23       	and	r24, r24
     dea:	52 f0       	brmi	.+20     	; 0xe00 <__fp_round+0x20>
     dec:	bb 0f       	add	r27, r27
     dee:	40 f4       	brcc	.+16     	; 0xe00 <__fp_round+0x20>
     df0:	bf 2b       	or	r27, r31
     df2:	11 f4       	brne	.+4      	; 0xdf8 <__fp_round+0x18>
     df4:	60 ff       	sbrs	r22, 0
     df6:	04 c0       	rjmp	.+8      	; 0xe00 <__fp_round+0x20>
     df8:	6f 5f       	subi	r22, 0xFF	; 255
     dfa:	7f 4f       	sbci	r23, 0xFF	; 255
     dfc:	8f 4f       	sbci	r24, 0xFF	; 255
     dfe:	9f 4f       	sbci	r25, 0xFF	; 255
     e00:	08 95       	ret

00000e02 <__fp_split3>:
     e02:	57 fd       	sbrc	r21, 7
     e04:	90 58       	subi	r25, 0x80	; 128
     e06:	44 0f       	add	r20, r20
     e08:	55 1f       	adc	r21, r21
     e0a:	59 f0       	breq	.+22     	; 0xe22 <__fp_splitA+0x10>
     e0c:	5f 3f       	cpi	r21, 0xFF	; 255
     e0e:	71 f0       	breq	.+28     	; 0xe2c <__fp_splitA+0x1a>
     e10:	47 95       	ror	r20

00000e12 <__fp_splitA>:
     e12:	88 0f       	add	r24, r24
     e14:	97 fb       	bst	r25, 7
     e16:	99 1f       	adc	r25, r25
     e18:	61 f0       	breq	.+24     	; 0xe32 <__fp_splitA+0x20>
     e1a:	9f 3f       	cpi	r25, 0xFF	; 255
     e1c:	79 f0       	breq	.+30     	; 0xe3c <__fp_splitA+0x2a>
     e1e:	87 95       	ror	r24
     e20:	08 95       	ret
     e22:	12 16       	cp	r1, r18
     e24:	13 06       	cpc	r1, r19
     e26:	14 06       	cpc	r1, r20
     e28:	55 1f       	adc	r21, r21
     e2a:	f2 cf       	rjmp	.-28     	; 0xe10 <__fp_split3+0xe>
     e2c:	46 95       	lsr	r20
     e2e:	f1 df       	rcall	.-30     	; 0xe12 <__fp_splitA>
     e30:	08 c0       	rjmp	.+16     	; 0xe42 <__fp_splitA+0x30>
     e32:	16 16       	cp	r1, r22
     e34:	17 06       	cpc	r1, r23
     e36:	18 06       	cpc	r1, r24
     e38:	99 1f       	adc	r25, r25
     e3a:	f1 cf       	rjmp	.-30     	; 0xe1e <__fp_splitA+0xc>
     e3c:	86 95       	lsr	r24
     e3e:	71 05       	cpc	r23, r1
     e40:	61 05       	cpc	r22, r1
     e42:	08 94       	sec
     e44:	08 95       	ret

00000e46 <__fp_zero>:
     e46:	e8 94       	clt

00000e48 <__fp_szero>:
     e48:	bb 27       	eor	r27, r27
     e4a:	66 27       	eor	r22, r22
     e4c:	77 27       	eor	r23, r23
     e4e:	cb 01       	movw	r24, r22
     e50:	97 f9       	bld	r25, 7
     e52:	08 95       	ret

00000e54 <__gesf2>:
     e54:	8a df       	rcall	.-236    	; 0xd6a <__fp_cmp>
     e56:	08 f4       	brcc	.+2      	; 0xe5a <__gesf2+0x6>
     e58:	8f ef       	ldi	r24, 0xFF	; 255
     e5a:	08 95       	ret

00000e5c <__mulsf3>:
     e5c:	0b d0       	rcall	.+22     	; 0xe74 <__mulsf3x>
     e5e:	c0 cf       	rjmp	.-128    	; 0xde0 <__fp_round>
     e60:	b1 df       	rcall	.-158    	; 0xdc4 <__fp_pscA>
     e62:	28 f0       	brcs	.+10     	; 0xe6e <__mulsf3+0x12>
     e64:	b6 df       	rcall	.-148    	; 0xdd2 <__fp_pscB>
     e66:	18 f0       	brcs	.+6      	; 0xe6e <__mulsf3+0x12>
     e68:	95 23       	and	r25, r21
     e6a:	09 f0       	breq	.+2      	; 0xe6e <__mulsf3+0x12>
     e6c:	a2 cf       	rjmp	.-188    	; 0xdb2 <__fp_inf>
     e6e:	a7 cf       	rjmp	.-178    	; 0xdbe <__fp_nan>
     e70:	11 24       	eor	r1, r1
     e72:	ea cf       	rjmp	.-44     	; 0xe48 <__fp_szero>

00000e74 <__mulsf3x>:
     e74:	c6 df       	rcall	.-116    	; 0xe02 <__fp_split3>
     e76:	a0 f3       	brcs	.-24     	; 0xe60 <__mulsf3+0x4>

00000e78 <__mulsf3_pse>:
     e78:	95 9f       	mul	r25, r21
     e7a:	d1 f3       	breq	.-12     	; 0xe70 <__mulsf3+0x14>
     e7c:	95 0f       	add	r25, r21
     e7e:	50 e0       	ldi	r21, 0x00	; 0
     e80:	55 1f       	adc	r21, r21
     e82:	62 9f       	mul	r22, r18
     e84:	f0 01       	movw	r30, r0
     e86:	72 9f       	mul	r23, r18
     e88:	bb 27       	eor	r27, r27
     e8a:	f0 0d       	add	r31, r0
     e8c:	b1 1d       	adc	r27, r1
     e8e:	63 9f       	mul	r22, r19
     e90:	aa 27       	eor	r26, r26
     e92:	f0 0d       	add	r31, r0
     e94:	b1 1d       	adc	r27, r1
     e96:	aa 1f       	adc	r26, r26
     e98:	64 9f       	mul	r22, r20
     e9a:	66 27       	eor	r22, r22
     e9c:	b0 0d       	add	r27, r0
     e9e:	a1 1d       	adc	r26, r1
     ea0:	66 1f       	adc	r22, r22
     ea2:	82 9f       	mul	r24, r18
     ea4:	22 27       	eor	r18, r18
     ea6:	b0 0d       	add	r27, r0
     ea8:	a1 1d       	adc	r26, r1
     eaa:	62 1f       	adc	r22, r18
     eac:	73 9f       	mul	r23, r19
     eae:	b0 0d       	add	r27, r0
     eb0:	a1 1d       	adc	r26, r1
     eb2:	62 1f       	adc	r22, r18
     eb4:	83 9f       	mul	r24, r19
     eb6:	a0 0d       	add	r26, r0
     eb8:	61 1d       	adc	r22, r1
     eba:	22 1f       	adc	r18, r18
     ebc:	74 9f       	mul	r23, r20
     ebe:	33 27       	eor	r19, r19
     ec0:	a0 0d       	add	r26, r0
     ec2:	61 1d       	adc	r22, r1
     ec4:	23 1f       	adc	r18, r19
     ec6:	84 9f       	mul	r24, r20
     ec8:	60 0d       	add	r22, r0
     eca:	21 1d       	adc	r18, r1
     ecc:	82 2f       	mov	r24, r18
     ece:	76 2f       	mov	r23, r22
     ed0:	6a 2f       	mov	r22, r26
     ed2:	11 24       	eor	r1, r1
     ed4:	9f 57       	subi	r25, 0x7F	; 127
     ed6:	50 40       	sbci	r21, 0x00	; 0
     ed8:	8a f0       	brmi	.+34     	; 0xefc <__mulsf3_pse+0x84>
     eda:	e1 f0       	breq	.+56     	; 0xf14 <__mulsf3_pse+0x9c>
     edc:	88 23       	and	r24, r24
     ede:	4a f0       	brmi	.+18     	; 0xef2 <__mulsf3_pse+0x7a>
     ee0:	ee 0f       	add	r30, r30
     ee2:	ff 1f       	adc	r31, r31
     ee4:	bb 1f       	adc	r27, r27
     ee6:	66 1f       	adc	r22, r22
     ee8:	77 1f       	adc	r23, r23
     eea:	88 1f       	adc	r24, r24
     eec:	91 50       	subi	r25, 0x01	; 1
     eee:	50 40       	sbci	r21, 0x00	; 0
     ef0:	a9 f7       	brne	.-22     	; 0xedc <__mulsf3_pse+0x64>
     ef2:	9e 3f       	cpi	r25, 0xFE	; 254
     ef4:	51 05       	cpc	r21, r1
     ef6:	70 f0       	brcs	.+28     	; 0xf14 <__mulsf3_pse+0x9c>
     ef8:	5c cf       	rjmp	.-328    	; 0xdb2 <__fp_inf>
     efa:	a6 cf       	rjmp	.-180    	; 0xe48 <__fp_szero>
     efc:	5f 3f       	cpi	r21, 0xFF	; 255
     efe:	ec f3       	brlt	.-6      	; 0xefa <__mulsf3_pse+0x82>
     f00:	98 3e       	cpi	r25, 0xE8	; 232
     f02:	dc f3       	brlt	.-10     	; 0xefa <__mulsf3_pse+0x82>
     f04:	86 95       	lsr	r24
     f06:	77 95       	ror	r23
     f08:	67 95       	ror	r22
     f0a:	b7 95       	ror	r27
     f0c:	f7 95       	ror	r31
     f0e:	e7 95       	ror	r30
     f10:	9f 5f       	subi	r25, 0xFF	; 255
     f12:	c1 f7       	brne	.-16     	; 0xf04 <__mulsf3_pse+0x8c>
     f14:	fe 2b       	or	r31, r30
     f16:	88 0f       	add	r24, r24
     f18:	91 1d       	adc	r25, r1
     f1a:	96 95       	lsr	r25
     f1c:	87 95       	ror	r24
     f1e:	97 f9       	bld	r25, 7
     f20:	08 95       	ret

00000f22 <__udivmodsi4>:
     f22:	a1 e2       	ldi	r26, 0x21	; 33
     f24:	1a 2e       	mov	r1, r26
     f26:	aa 1b       	sub	r26, r26
     f28:	bb 1b       	sub	r27, r27
     f2a:	fd 01       	movw	r30, r26
     f2c:	0d c0       	rjmp	.+26     	; 0xf48 <__udivmodsi4_ep>

00000f2e <__udivmodsi4_loop>:
     f2e:	aa 1f       	adc	r26, r26
     f30:	bb 1f       	adc	r27, r27
     f32:	ee 1f       	adc	r30, r30
     f34:	ff 1f       	adc	r31, r31
     f36:	a2 17       	cp	r26, r18
     f38:	b3 07       	cpc	r27, r19
     f3a:	e4 07       	cpc	r30, r20
     f3c:	f5 07       	cpc	r31, r21
     f3e:	20 f0       	brcs	.+8      	; 0xf48 <__udivmodsi4_ep>
     f40:	a2 1b       	sub	r26, r18
     f42:	b3 0b       	sbc	r27, r19
     f44:	e4 0b       	sbc	r30, r20
     f46:	f5 0b       	sbc	r31, r21

00000f48 <__udivmodsi4_ep>:
     f48:	66 1f       	adc	r22, r22
     f4a:	77 1f       	adc	r23, r23
     f4c:	88 1f       	adc	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	1a 94       	dec	r1
     f52:	69 f7       	brne	.-38     	; 0xf2e <__udivmodsi4_loop>
     f54:	60 95       	com	r22
     f56:	70 95       	com	r23
     f58:	80 95       	com	r24
     f5a:	90 95       	com	r25
     f5c:	9b 01       	movw	r18, r22
     f5e:	ac 01       	movw	r20, r24
     f60:	bd 01       	movw	r22, r26
     f62:	cf 01       	movw	r24, r30
     f64:	08 95       	ret

00000f66 <__divmodsi4>:
     f66:	05 2e       	mov	r0, r21
     f68:	97 fb       	bst	r25, 7
     f6a:	16 f4       	brtc	.+4      	; 0xf70 <__divmodsi4+0xa>
     f6c:	00 94       	com	r0
     f6e:	0f d0       	rcall	.+30     	; 0xf8e <__negsi2>
     f70:	57 fd       	sbrc	r21, 7
     f72:	05 d0       	rcall	.+10     	; 0xf7e <__divmodsi4_neg2>
     f74:	d6 df       	rcall	.-84     	; 0xf22 <__udivmodsi4>
     f76:	07 fc       	sbrc	r0, 7
     f78:	02 d0       	rcall	.+4      	; 0xf7e <__divmodsi4_neg2>
     f7a:	46 f4       	brtc	.+16     	; 0xf8c <__divmodsi4_exit>
     f7c:	08 c0       	rjmp	.+16     	; 0xf8e <__negsi2>

00000f7e <__divmodsi4_neg2>:
     f7e:	50 95       	com	r21
     f80:	40 95       	com	r20
     f82:	30 95       	com	r19
     f84:	21 95       	neg	r18
     f86:	3f 4f       	sbci	r19, 0xFF	; 255
     f88:	4f 4f       	sbci	r20, 0xFF	; 255
     f8a:	5f 4f       	sbci	r21, 0xFF	; 255

00000f8c <__divmodsi4_exit>:
     f8c:	08 95       	ret

00000f8e <__negsi2>:
     f8e:	90 95       	com	r25
     f90:	80 95       	com	r24
     f92:	70 95       	com	r23
     f94:	61 95       	neg	r22
     f96:	7f 4f       	sbci	r23, 0xFF	; 255
     f98:	8f 4f       	sbci	r24, 0xFF	; 255
     f9a:	9f 4f       	sbci	r25, 0xFF	; 255
     f9c:	08 95       	ret

00000f9e <__umulhisi3>:
     f9e:	a2 9f       	mul	r26, r18
     fa0:	b0 01       	movw	r22, r0
     fa2:	b3 9f       	mul	r27, r19
     fa4:	c0 01       	movw	r24, r0
     fa6:	a3 9f       	mul	r26, r19
     fa8:	01 d0       	rcall	.+2      	; 0xfac <__umulhisi3+0xe>
     faa:	b2 9f       	mul	r27, r18
     fac:	70 0d       	add	r23, r0
     fae:	81 1d       	adc	r24, r1
     fb0:	11 24       	eor	r1, r1
     fb2:	91 1d       	adc	r25, r1
     fb4:	08 95       	ret

00000fb6 <__usmulhisi3>:
     fb6:	f3 df       	rcall	.-26     	; 0xf9e <__umulhisi3>

00000fb8 <__usmulhisi3_tail>:
     fb8:	b7 ff       	sbrs	r27, 7
     fba:	08 95       	ret
     fbc:	82 1b       	sub	r24, r18
     fbe:	93 0b       	sbc	r25, r19
     fc0:	08 95       	ret

00000fc2 <__muluhisi3>:
     fc2:	ed df       	rcall	.-38     	; 0xf9e <__umulhisi3>
     fc4:	a5 9f       	mul	r26, r21
     fc6:	90 0d       	add	r25, r0
     fc8:	b4 9f       	mul	r27, r20
     fca:	90 0d       	add	r25, r0
     fcc:	a4 9f       	mul	r26, r20
     fce:	80 0d       	add	r24, r0
     fd0:	91 1d       	adc	r25, r1
     fd2:	11 24       	eor	r1, r1
     fd4:	08 95       	ret

00000fd6 <__itoa_ncheck>:
     fd6:	bb 27       	eor	r27, r27
     fd8:	4a 30       	cpi	r20, 0x0A	; 10
     fda:	31 f4       	brne	.+12     	; 0xfe8 <__itoa_ncheck+0x12>
     fdc:	99 23       	and	r25, r25
     fde:	22 f4       	brpl	.+8      	; 0xfe8 <__itoa_ncheck+0x12>
     fe0:	bd e2       	ldi	r27, 0x2D	; 45
     fe2:	90 95       	com	r25
     fe4:	81 95       	neg	r24
     fe6:	9f 4f       	sbci	r25, 0xFF	; 255
     fe8:	01 c0       	rjmp	.+2      	; 0xfec <__utoa_common>

00000fea <__utoa_ncheck>:
     fea:	bb 27       	eor	r27, r27

00000fec <__utoa_common>:
     fec:	fb 01       	movw	r30, r22
     fee:	55 27       	eor	r21, r21
     ff0:	aa 27       	eor	r26, r26
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	aa 1f       	adc	r26, r26
     ff8:	a4 17       	cp	r26, r20
     ffa:	10 f0       	brcs	.+4      	; 0x1000 <__utoa_common+0x14>
     ffc:	a4 1b       	sub	r26, r20
     ffe:	83 95       	inc	r24
    1000:	50 51       	subi	r21, 0x10	; 16
    1002:	b9 f7       	brne	.-18     	; 0xff2 <__utoa_common+0x6>
    1004:	a0 5d       	subi	r26, 0xD0	; 208
    1006:	aa 33       	cpi	r26, 0x3A	; 58
    1008:	08 f0       	brcs	.+2      	; 0x100c <__utoa_common+0x20>
    100a:	a9 5d       	subi	r26, 0xD9	; 217
    100c:	a1 93       	st	Z+, r26
    100e:	00 97       	sbiw	r24, 0x00	; 0
    1010:	79 f7       	brne	.-34     	; 0xff0 <__utoa_common+0x4>
    1012:	b1 11       	cpse	r27, r1
    1014:	b1 93       	st	Z+, r27
    1016:	11 92       	st	Z+, r1
    1018:	cb 01       	movw	r24, r22
    101a:	00 c0       	rjmp	.+0      	; 0x101c <strrev>

0000101c <strrev>:
    101c:	dc 01       	movw	r26, r24
    101e:	fc 01       	movw	r30, r24
    1020:	67 2f       	mov	r22, r23
    1022:	71 91       	ld	r23, Z+
    1024:	77 23       	and	r23, r23
    1026:	e1 f7       	brne	.-8      	; 0x1020 <strrev+0x4>
    1028:	32 97       	sbiw	r30, 0x02	; 2
    102a:	04 c0       	rjmp	.+8      	; 0x1034 <strrev+0x18>
    102c:	7c 91       	ld	r23, X
    102e:	6d 93       	st	X+, r22
    1030:	70 83       	st	Z, r23
    1032:	62 91       	ld	r22, -Z
    1034:	ae 17       	cp	r26, r30
    1036:	bf 07       	cpc	r27, r31
    1038:	c8 f3       	brcs	.-14     	; 0x102c <strrev+0x10>
    103a:	08 95       	ret

0000103c <_exit>:
    103c:	f8 94       	cli

0000103e <__stop_program>:
    103e:	ff cf       	rjmp	.-2      	; 0x103e <__stop_program>
