
Run2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d32  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000da6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001e  00800060  00800060  00000da6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000da6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000dd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017c1  00000000  00000000  00000f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000846  00000000  00000000  000026f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000130e  00000000  00000000  00002f3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d8  00000000  00000000  0000424c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000ed22  00000000  00000000  00004624  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cf9  00000000  00000000  00013346  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  0001403f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002f05  00000000  00000000  0001413f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	75 c2       	rjmp	.+1258   	; 0x4f0 <__vector_2>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1f c0       	rjmp	.+62     	; 0x48 <__vector_4>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	4b c0       	rjmp	.+150    	; 0xaa <__vector_9>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	ae 37       	cpi	r26, 0x7E	; 126
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	bb d5       	rcall	.+2934   	; 0xbba <main>
  44:	74 c6       	rjmp	.+3304   	; 0xd2e <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <__vector_4>:
  48:	1f 92       	push	r1
  4a:	0f 92       	push	r0
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	0f 92       	push	r0
  50:	11 24       	eor	r1, r1
  52:	8f 93       	push	r24
  54:	9f 93       	push	r25
  56:	af 93       	push	r26
  58:	bf 93       	push	r27
  5a:	84 b5       	in	r24, 0x24	; 36
  5c:	8b 5d       	subi	r24, 0xDB	; 219
  5e:	84 bd       	out	0x24, r24	; 36
  60:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <counter36kHz>
  64:	8f 5f       	subi	r24, 0xFF	; 255
  66:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <counter36kHz>
  6a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <counter36kHz>
  6e:	81 11       	cpse	r24, r1
  70:	13 c0       	rjmp	.+38     	; 0x98 <__vector_4+0x50>
  72:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <timeBase>
  76:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <timeBase+0x1>
  7a:	a0 91 72 00 	lds	r26, 0x0072	; 0x800072 <timeBase+0x2>
  7e:	b0 91 73 00 	lds	r27, 0x0073	; 0x800073 <timeBase+0x3>
  82:	01 96       	adiw	r24, 0x01	; 1
  84:	a1 1d       	adc	r26, r1
  86:	b1 1d       	adc	r27, r1
  88:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <timeBase>
  8c:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <timeBase+0x1>
  90:	a0 93 72 00 	sts	0x0072, r26	; 0x800072 <timeBase+0x2>
  94:	b0 93 73 00 	sts	0x0073, r27	; 0x800073 <timeBase+0x3>
  98:	bf 91       	pop	r27
  9a:	af 91       	pop	r26
  9c:	9f 91       	pop	r25
  9e:	8f 91       	pop	r24
  a0:	0f 90       	pop	r0
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	0f 90       	pop	r0
  a6:	1f 90       	pop	r1
  a8:	18 95       	reti

000000aa <__vector_9>:
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	0f 92       	push	r0
  b2:	11 24       	eor	r1, r1
  b4:	2f 93       	push	r18
  b6:	3f 93       	push	r19
  b8:	4f 93       	push	r20
  ba:	5f 93       	push	r21
  bc:	6f 93       	push	r22
  be:	7f 93       	push	r23
  c0:	8f 93       	push	r24
  c2:	9f 93       	push	r25
  c4:	af 93       	push	r26
  c6:	bf 93       	push	r27
  c8:	ef 93       	push	r30
  ca:	ff 93       	push	r31
  cc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counter.2137>
  d0:	81 11       	cpse	r24, r1
  d2:	46 c0       	rjmp	.+140    	; 0x160 <__vector_9+0xb6>
  d4:	81 e4       	ldi	r24, 0x41	; 65
  d6:	87 b9       	out	0x07, r24	; 7
  d8:	36 9a       	sbi	0x06, 6	; 6
  da:	34 9b       	sbis	0x06, 4	; 6
  dc:	fe cf       	rjmp	.-4      	; 0xda <__vector_9+0x30>
  de:	34 9a       	sbi	0x06, 4	; 6
  e0:	24 b1       	in	r18, 0x04	; 4
  e2:	85 b1       	in	r24, 0x05	; 5
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	98 2f       	mov	r25, r24
  e8:	88 27       	eor	r24, r24
  ea:	82 0f       	add	r24, r18
  ec:	91 1d       	adc	r25, r1
  ee:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <odometryLeft+0x1>
  f2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <odometryLeft>
  f6:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <odometryLeft>
  fa:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <odometryLeft+0x1>
  fe:	88 35       	cpi	r24, 0x58	; 88
 100:	92 40       	sbci	r25, 0x02	; 2
 102:	bc f4       	brge	.+46     	; 0x132 <__vector_9+0x88>
 104:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <leftSwitchPoint.2138>
 108:	81 30       	cpi	r24, 0x01	; 1
 10a:	99 f4       	brne	.+38     	; 0x132 <__vector_9+0x88>
 10c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <encoderLeft>
 110:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <encoderLeft+0x1>
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <encoderLeft+0x1>
 11a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <encoderLeft>
 11e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <leftSwitchPoint.2138>
 122:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <odometryLeft>
 126:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <odometryLeft+0x1>
 12a:	8d 3b       	cpi	r24, 0xBD	; 189
 12c:	92 40       	sbci	r25, 0x02	; 2
 12e:	64 f4       	brge	.+24     	; 0x148 <__vector_9+0x9e>
 130:	17 c0       	rjmp	.+46     	; 0x160 <__vector_9+0xb6>
 132:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <odometryLeft>
 136:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <odometryLeft+0x1>
 13a:	8d 3b       	cpi	r24, 0xBD	; 189
 13c:	92 40       	sbci	r25, 0x02	; 2
 13e:	84 f0       	brlt	.+32     	; 0x160 <__vector_9+0xb6>
 140:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <leftSwitchPoint.2138>
 144:	81 11       	cpse	r24, r1
 146:	0c c0       	rjmp	.+24     	; 0x160 <__vector_9+0xb6>
 148:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <encoderLeft>
 14c:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <encoderLeft+0x1>
 150:	01 96       	adiw	r24, 0x01	; 1
 152:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <encoderLeft+0x1>
 156:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <encoderLeft>
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <leftSwitchPoint.2138>
 160:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counter.2137>
 164:	81 30       	cpi	r24, 0x01	; 1
 166:	09 f0       	breq	.+2      	; 0x16a <__vector_9+0xc0>
 168:	46 c0       	rjmp	.+140    	; 0x1f6 <__vector_9+0x14c>
 16a:	80 e4       	ldi	r24, 0x40	; 64
 16c:	87 b9       	out	0x07, r24	; 7
 16e:	36 9a       	sbi	0x06, 6	; 6
 170:	34 9b       	sbis	0x06, 4	; 6
 172:	fe cf       	rjmp	.-4      	; 0x170 <__vector_9+0xc6>
 174:	34 9a       	sbi	0x06, 4	; 6
 176:	24 b1       	in	r18, 0x04	; 4
 178:	85 b1       	in	r24, 0x05	; 5
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	98 2f       	mov	r25, r24
 17e:	88 27       	eor	r24, r24
 180:	82 0f       	add	r24, r18
 182:	91 1d       	adc	r25, r1
 184:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <odometryRight+0x1>
 188:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <odometryRight>
 18c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <odometryRight>
 190:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <odometryRight+0x1>
 194:	8a 38       	cpi	r24, 0x8A	; 138
 196:	92 40       	sbci	r25, 0x02	; 2
 198:	bc f4       	brge	.+46     	; 0x1c8 <__vector_9+0x11e>
 19a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 19e:	81 30       	cpi	r24, 0x01	; 1
 1a0:	99 f4       	brne	.+38     	; 0x1c8 <__vector_9+0x11e>
 1a2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <encoderRight>
 1a6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <encoderRight+0x1>
 1aa:	01 96       	adiw	r24, 0x01	; 1
 1ac:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <encoderRight+0x1>
 1b0:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <encoderRight>
 1b4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
 1b8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <odometryRight>
 1bc:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <odometryRight+0x1>
 1c0:	8f 3e       	cpi	r24, 0xEF	; 239
 1c2:	92 40       	sbci	r25, 0x02	; 2
 1c4:	64 f4       	brge	.+24     	; 0x1de <__vector_9+0x134>
 1c6:	17 c0       	rjmp	.+46     	; 0x1f6 <__vector_9+0x14c>
 1c8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <odometryRight>
 1cc:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <odometryRight+0x1>
 1d0:	8f 3e       	cpi	r24, 0xEF	; 239
 1d2:	92 40       	sbci	r25, 0x02	; 2
 1d4:	84 f0       	brlt	.+32     	; 0x1f6 <__vector_9+0x14c>
 1d6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 1da:	81 11       	cpse	r24, r1
 1dc:	0c c0       	rjmp	.+24     	; 0x1f6 <__vector_9+0x14c>
 1de:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <encoderRight>
 1e2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <encoderRight+0x1>
 1e6:	01 96       	adiw	r24, 0x01	; 1
 1e8:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <encoderRight+0x1>
 1ec:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <encoderRight>
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 1f6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counter.2137>
 1fa:	82 30       	cpi	r24, 0x02	; 2
 1fc:	f9 f4       	brne	.+62     	; 0x23c <__vector_9+0x192>
 1fe:	83 e4       	ldi	r24, 0x43	; 67
 200:	87 b9       	out	0x07, r24	; 7
 202:	36 9a       	sbi	0x06, 6	; 6
 204:	34 9b       	sbis	0x06, 4	; 6
 206:	fe cf       	rjmp	.-4      	; 0x204 <__vector_9+0x15a>
 208:	34 9a       	sbi	0x06, 4	; 6
 20a:	24 b1       	in	r18, 0x04	; 4
 20c:	85 b1       	in	r24, 0x05	; 5
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	98 2f       	mov	r25, r24
 212:	88 27       	eor	r24, r24
 214:	82 0f       	add	r24, r18
 216:	91 1d       	adc	r25, r1
 218:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <lineFollowLeft+0x1>
 21c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <lineFollowLeft>
 220:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <lineFollowLeft>
 224:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <lineFollowLeft+0x1>
 228:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <lineFollowRight>
 22c:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <lineFollowRight+0x1>
 230:	82 1b       	sub	r24, r18
 232:	93 0b       	sbc	r25, r19
 234:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <lineFollowDelta+0x1>
 238:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <lineFollowDelta>
 23c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counter.2137>
 240:	83 30       	cpi	r24, 0x03	; 3
 242:	39 f5       	brne	.+78     	; 0x292 <__vector_9+0x1e8>
 244:	82 e4       	ldi	r24, 0x42	; 66
 246:	87 b9       	out	0x07, r24	; 7
 248:	36 9a       	sbi	0x06, 6	; 6
 24a:	34 9b       	sbis	0x06, 4	; 6
 24c:	fe cf       	rjmp	.-4      	; 0x24a <__vector_9+0x1a0>
 24e:	34 9a       	sbi	0x06, 4	; 6
 250:	84 b1       	in	r24, 0x04	; 4
 252:	a5 b1       	in	r26, 0x05	; 5
 254:	b0 e0       	ldi	r27, 0x00	; 0
 256:	ba 2f       	mov	r27, r26
 258:	aa 27       	eor	r26, r26
 25a:	a8 0f       	add	r26, r24
 25c:	b1 1d       	adc	r27, r1
 25e:	20 ea       	ldi	r18, 0xA0	; 160
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	16 d5       	rcall	.+2604   	; 0xc90 <__usmulhisi3>
 264:	24 e6       	ldi	r18, 0x64	; 100
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	40 e0       	ldi	r20, 0x00	; 0
 26a:	50 e0       	ldi	r21, 0x00	; 0
 26c:	f5 d4       	rcall	.+2538   	; 0xc58 <__divmodsi4>
 26e:	30 93 6f 00 	sts	0x006F, r19	; 0x80006f <lineFollowRight+0x1>
 272:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <lineFollowRight>
 276:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <lineFollowLeft>
 27a:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <lineFollowLeft+0x1>
 27e:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <lineFollowRight>
 282:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <lineFollowRight+0x1>
 286:	82 1b       	sub	r24, r18
 288:	93 0b       	sbc	r25, r19
 28a:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <lineFollowDelta+0x1>
 28e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <lineFollowDelta>
 292:	80 ee       	ldi	r24, 0xE0	; 224
 294:	82 bf       	out	0x32, r24	; 50
 296:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counter.2137>
 29a:	8f 5f       	subi	r24, 0xFF	; 255
 29c:	84 30       	cpi	r24, 0x04	; 4
 29e:	18 f4       	brcc	.+6      	; 0x2a6 <__vector_9+0x1fc>
 2a0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <counter.2137>
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <__vector_9+0x200>
 2a6:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <counter.2137>
 2aa:	ff 91       	pop	r31
 2ac:	ef 91       	pop	r30
 2ae:	bf 91       	pop	r27
 2b0:	af 91       	pop	r26
 2b2:	9f 91       	pop	r25
 2b4:	8f 91       	pop	r24
 2b6:	7f 91       	pop	r23
 2b8:	6f 91       	pop	r22
 2ba:	5f 91       	pop	r21
 2bc:	4f 91       	pop	r20
 2be:	3f 91       	pop	r19
 2c0:	2f 91       	pop	r18
 2c2:	0f 90       	pop	r0
 2c4:	0f be       	out	0x3f, r0	; 63
 2c6:	0f 90       	pop	r0
 2c8:	1f 90       	pop	r1
 2ca:	18 95       	reti

000002cc <SystemTime>:
 2cc:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <timeBase>
 2d0:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <timeBase+0x1>
 2d4:	a0 91 72 00 	lds	r26, 0x0072	; 0x800072 <timeBase+0x2>
 2d8:	b0 91 73 00 	lds	r27, 0x0073	; 0x800073 <timeBase+0x3>
 2dc:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <counter36kHz>
 2e0:	ba 2f       	mov	r27, r26
 2e2:	a9 2f       	mov	r26, r25
 2e4:	98 2f       	mov	r25, r24
 2e6:	88 27       	eor	r24, r24
 2e8:	bc 01       	movw	r22, r24
 2ea:	cd 01       	movw	r24, r26
 2ec:	62 0f       	add	r22, r18
 2ee:	71 1d       	adc	r23, r1
 2f0:	81 1d       	adc	r24, r1
 2f2:	91 1d       	adc	r25, r1
 2f4:	24 e2       	ldi	r18, 0x24	; 36
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	40 e0       	ldi	r20, 0x00	; 0
 2fa:	50 e0       	ldi	r21, 0x00	; 0
 2fc:	8b d4       	rcall	.+2326   	; 0xc14 <__udivmodsi4>
 2fe:	ca 01       	movw	r24, r20
 300:	b9 01       	movw	r22, r18
 302:	08 95       	ret

00000304 <MotorSpeed>:
 304:	9c 01       	movw	r18, r24
 306:	99 23       	and	r25, r25
 308:	24 f4       	brge	.+8      	; 0x312 <MotorSpeed+0xe>
 30a:	22 27       	eor	r18, r18
 30c:	33 27       	eor	r19, r19
 30e:	28 1b       	sub	r18, r24
 310:	39 0b       	sbc	r19, r25
 312:	3b bd       	out	0x2b, r19	; 43
 314:	2a bd       	out	0x2a, r18	; 42
 316:	9b 01       	movw	r18, r22
 318:	77 23       	and	r23, r23
 31a:	24 f4       	brge	.+8      	; 0x324 <MotorSpeed+0x20>
 31c:	22 27       	eor	r18, r18
 31e:	33 27       	eor	r19, r19
 320:	26 1b       	sub	r18, r22
 322:	37 0b       	sbc	r19, r23
 324:	39 bd       	out	0x29, r19	; 41
 326:	28 bd       	out	0x28, r18	; 40
 328:	18 16       	cp	r1, r24
 32a:	19 06       	cpc	r1, r25
 32c:	24 f4       	brge	.+8      	; 0x336 <MotorSpeed+0x32>
 32e:	22 b3       	in	r18, 0x12	; 18
 330:	2f 7c       	andi	r18, 0xCF	; 207
 332:	20 62       	ori	r18, 0x20	; 32
 334:	22 bb       	out	0x12, r18	; 18
 336:	99 23       	and	r25, r25
 338:	24 f4       	brge	.+8      	; 0x342 <MotorSpeed+0x3e>
 33a:	22 b3       	in	r18, 0x12	; 18
 33c:	2f 7c       	andi	r18, 0xCF	; 207
 33e:	20 61       	ori	r18, 0x10	; 16
 340:	22 bb       	out	0x12, r18	; 18
 342:	89 2b       	or	r24, r25
 344:	19 f4       	brne	.+6      	; 0x34c <MotorSpeed+0x48>
 346:	82 b3       	in	r24, 0x12	; 18
 348:	8f 7c       	andi	r24, 0xCF	; 207
 34a:	82 bb       	out	0x12, r24	; 18
 34c:	16 16       	cp	r1, r22
 34e:	17 06       	cpc	r1, r23
 350:	24 f4       	brge	.+8      	; 0x35a <MotorSpeed+0x56>
 352:	88 b3       	in	r24, 0x18	; 24
 354:	8f 7c       	andi	r24, 0xCF	; 207
 356:	80 62       	ori	r24, 0x20	; 32
 358:	88 bb       	out	0x18, r24	; 24
 35a:	77 23       	and	r23, r23
 35c:	24 f4       	brge	.+8      	; 0x366 <MotorSpeed+0x62>
 35e:	88 b3       	in	r24, 0x18	; 24
 360:	8f 7c       	andi	r24, 0xCF	; 207
 362:	80 61       	ori	r24, 0x10	; 16
 364:	88 bb       	out	0x18, r24	; 24
 366:	67 2b       	or	r22, r23
 368:	19 f4       	brne	.+6      	; 0x370 <MotorSpeed+0x6c>
 36a:	88 b3       	in	r24, 0x18	; 24
 36c:	8f 7c       	andi	r24, 0xCF	; 207
 36e:	88 bb       	out	0x18, r24	; 24
 370:	08 95       	ret

00000372 <StatusLED>:
 372:	81 11       	cpse	r24, r1
 374:	03 c0       	rjmp	.+6      	; 0x37c <StatusLED+0xa>
 376:	c0 98       	cbi	0x18, 0	; 24
 378:	92 98       	cbi	0x12, 2	; 18
 37a:	0a c0       	rjmp	.+20     	; 0x390 <StatusLED+0x1e>
 37c:	81 30       	cpi	r24, 0x01	; 1
 37e:	19 f4       	brne	.+6      	; 0x386 <StatusLED+0x14>
 380:	c0 9a       	sbi	0x18, 0	; 24
 382:	92 98       	cbi	0x12, 2	; 18
 384:	08 95       	ret
 386:	83 30       	cpi	r24, 0x03	; 3
 388:	19 f4       	brne	.+6      	; 0x390 <StatusLED+0x1e>
 38a:	c0 9a       	sbi	0x18, 0	; 24
 38c:	92 9a       	sbi	0x12, 2	; 18
 38e:	08 95       	ret
 390:	82 30       	cpi	r24, 0x02	; 2
 392:	11 f4       	brne	.+4      	; 0x398 <StatusLED+0x26>
 394:	c0 9a       	sbi	0x18, 0	; 24
 396:	92 9a       	sbi	0x12, 2	; 18
 398:	08 95       	ret

0000039a <LineLED>:
 39a:	22 b3       	in	r18, 0x12	; 18
 39c:	2f 7b       	andi	r18, 0xBF	; 191
 39e:	30 e4       	ldi	r19, 0x40	; 64
 3a0:	83 9f       	mul	r24, r19
 3a2:	c0 01       	movw	r24, r0
 3a4:	11 24       	eor	r1, r1
 3a6:	82 2b       	or	r24, r18
 3a8:	82 bb       	out	0x12, r24	; 18
 3aa:	08 95       	ret

000003ac <BackLEDs>:
 3ac:	81 11       	cpse	r24, r1
 3ae:	12 c0       	rjmp	.+36     	; 0x3d4 <BackLEDs+0x28>
 3b0:	61 11       	cpse	r22, r1
 3b2:	08 c0       	rjmp	.+16     	; 0x3c4 <BackLEDs+0x18>
 3b4:	a9 98       	cbi	0x15, 1	; 21
 3b6:	61 11       	cpse	r22, r1
 3b8:	15 c0       	rjmp	.+42     	; 0x3e4 <BackLEDs+0x38>
 3ba:	a8 98       	cbi	0x15, 0	; 21
 3bc:	81 11       	cpse	r24, r1
 3be:	12 c0       	rjmp	.+36     	; 0x3e4 <BackLEDs+0x38>
 3c0:	97 9a       	sbi	0x12, 7	; 18
 3c2:	08 95       	ret
 3c4:	97 98       	cbi	0x12, 7	; 18
 3c6:	94 b3       	in	r25, 0x14	; 20
 3c8:	93 60       	ori	r25, 0x03	; 3
 3ca:	94 bb       	out	0x14, r25	; 20
 3cc:	95 b3       	in	r25, 0x15	; 21
 3ce:	93 60       	ori	r25, 0x03	; 3
 3d0:	95 bb       	out	0x15, r25	; 21
 3d2:	f0 cf       	rjmp	.-32     	; 0x3b4 <BackLEDs+0x8>
 3d4:	97 98       	cbi	0x12, 7	; 18
 3d6:	94 b3       	in	r25, 0x14	; 20
 3d8:	93 60       	ori	r25, 0x03	; 3
 3da:	94 bb       	out	0x14, r25	; 20
 3dc:	95 b3       	in	r25, 0x15	; 21
 3de:	93 60       	ori	r25, 0x03	; 3
 3e0:	95 bb       	out	0x15, r25	; 21
 3e2:	e9 cf       	rjmp	.-46     	; 0x3b6 <BackLEDs+0xa>
 3e4:	08 95       	ret

000003e6 <Init>:
 3e6:	89 e7       	ldi	r24, 0x79	; 121
 3e8:	85 bd       	out	0x25, r24	; 37
 3ea:	81 e9       	ldi	r24, 0x91	; 145
 3ec:	83 bd       	out	0x23, r24	; 35
 3ee:	89 b7       	in	r24, 0x39	; 57
 3f0:	80 64       	ori	r24, 0x40	; 64
 3f2:	89 bf       	out	0x39, r24	; 57
 3f4:	1b b8       	out	0x0b, r1	; 11
 3f6:	1a b8       	out	0x0a, r1	; 10
 3f8:	96 e8       	ldi	r25, 0x86	; 134
 3fa:	90 bd       	out	0x20, r25	; 32
 3fc:	8f ec       	ldi	r24, 0xCF	; 207
 3fe:	89 b9       	out	0x09, r24	; 9
 400:	8f e3       	ldi	r24, 0x3F	; 63
 402:	87 bb       	out	0x17, r24	; 23
 404:	84 ef       	ldi	r24, 0xF4	; 244
 406:	81 bb       	out	0x11, r24	; 17
 408:	81 ea       	ldi	r24, 0xA1	; 161
 40a:	8f bd       	out	0x2f, r24	; 47
 40c:	82 e0       	ldi	r24, 0x02	; 2
 40e:	8e bd       	out	0x2e, r24	; 46
 410:	83 b7       	in	r24, 0x33	; 51
 412:	84 60       	ori	r24, 0x04	; 4
 414:	83 bf       	out	0x33, r24	; 51
 416:	89 b7       	in	r24, 0x39	; 57
 418:	81 60       	ori	r24, 0x01	; 1
 41a:	89 bf       	out	0x39, r24	; 57
 41c:	80 ee       	ldi	r24, 0xE0	; 224
 41e:	82 bf       	out	0x32, r24	; 50
 420:	96 b9       	out	0x06, r25	; 6
 422:	60 e0       	ldi	r22, 0x00	; 0
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	c2 df       	rcall	.-124    	; 0x3ac <BackLEDs>
 428:	97 9a       	sbi	0x12, 7	; 18
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	b6 df       	rcall	.-148    	; 0x39a <LineLED>
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	a0 df       	rcall	.-192    	; 0x372 <StatusLED>
 432:	60 e0       	ldi	r22, 0x00	; 0
 434:	70 e0       	ldi	r23, 0x00	; 0
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	64 df       	rcall	.-312    	; 0x304 <MotorSpeed>
 43c:	78 94       	sei
 43e:	08 95       	ret

00000440 <SerWrite>:
 440:	13 be       	out	0x33, r1	; 51
 442:	28 e0       	ldi	r18, 0x08	; 8
 444:	2a b9       	out	0x0a, r18	; 10
 446:	07 c0       	rjmp	.+14     	; 0x456 <SerWrite+0x16>
 448:	5d 9b       	sbis	0x0b, 5	; 11
 44a:	fe cf       	rjmp	.-4      	; 0x448 <SerWrite+0x8>
 44c:	fc 01       	movw	r30, r24
 44e:	21 91       	ld	r18, Z+
 450:	cf 01       	movw	r24, r30
 452:	2c b9       	out	0x0c, r18	; 12
 454:	61 50       	subi	r22, 0x01	; 1
 456:	66 23       	and	r22, r22
 458:	19 f0       	breq	.+6      	; 0x460 <__stack+0x1>
 45a:	5d 9b       	sbis	0x0b, 5	; 11
 45c:	f5 cf       	rjmp	.-22     	; 0x448 <SerWrite+0x8>
 45e:	f6 cf       	rjmp	.-20     	; 0x44c <SerWrite+0xc>
 460:	5e 9b       	sbis	0x0b, 6	; 11
 462:	fe cf       	rjmp	.-4      	; 0x460 <__stack+0x1>
 464:	9e ef       	ldi	r25, 0xFE	; 254
 466:	04 c0       	rjmp	.+8      	; 0x470 <__stack+0x11>
 468:	81 50       	subi	r24, 0x01	; 1
 46a:	f1 f7       	brne	.-4      	; 0x468 <__stack+0x9>
 46c:	91 50       	subi	r25, 0x01	; 1
 46e:	11 f0       	breq	.+4      	; 0x474 <__stack+0x15>
 470:	8e ef       	ldi	r24, 0xFE	; 254
 472:	fa cf       	rjmp	.-12     	; 0x468 <__stack+0x9>
 474:	84 e0       	ldi	r24, 0x04	; 4
 476:	83 bf       	out	0x33, r24	; 51
 478:	08 95       	ret

0000047a <PrintInt>:
 47a:	0f 93       	push	r16
 47c:	1f 93       	push	r17
 47e:	cf 93       	push	r28
 480:	df 93       	push	r29
 482:	00 d0       	rcall	.+0      	; 0x484 <PrintInt+0xa>
 484:	00 d0       	rcall	.+0      	; 0x486 <PrintInt+0xc>
 486:	00 d0       	rcall	.+0      	; 0x488 <PrintInt+0xe>
 488:	cd b7       	in	r28, 0x3d	; 61
 48a:	de b7       	in	r29, 0x3e	; 62
 48c:	13 be       	out	0x33, r1	; 51
 48e:	4a e0       	ldi	r20, 0x0A	; 10
 490:	8e 01       	movw	r16, r28
 492:	0f 5f       	subi	r16, 0xFF	; 255
 494:	1f 4f       	sbci	r17, 0xFF	; 255
 496:	b8 01       	movw	r22, r16
 498:	17 d4       	rcall	.+2094   	; 0xcc8 <__itoa_ncheck>
 49a:	f8 01       	movw	r30, r16
 49c:	01 90       	ld	r0, Z+
 49e:	00 20       	and	r0, r0
 4a0:	e9 f7       	brne	.-6      	; 0x49c <PrintInt+0x22>
 4a2:	31 97       	sbiw	r30, 0x01	; 1
 4a4:	bf 01       	movw	r22, r30
 4a6:	60 1b       	sub	r22, r16
 4a8:	71 0b       	sbc	r23, r17
 4aa:	c8 01       	movw	r24, r16
 4ac:	c9 df       	rcall	.-110    	; 0x440 <SerWrite>
 4ae:	84 e0       	ldi	r24, 0x04	; 4
 4b0:	83 bf       	out	0x33, r24	; 51
 4b2:	26 96       	adiw	r28, 0x06	; 6
 4b4:	0f b6       	in	r0, 0x3f	; 63
 4b6:	f8 94       	cli
 4b8:	de bf       	out	0x3e, r29	; 62
 4ba:	0f be       	out	0x3f, r0	; 63
 4bc:	cd bf       	out	0x3d, r28	; 61
 4be:	df 91       	pop	r29
 4c0:	cf 91       	pop	r28
 4c2:	1f 91       	pop	r17
 4c4:	0f 91       	pop	r16
 4c6:	08 95       	ret

000004c8 <SwitchDetection>:
 4c8:	81 30       	cpi	r24, 0x01	; 1
 4ca:	91 05       	cpc	r25, r1
 4cc:	59 f4       	brne	.+22     	; 0x4e4 <SwitchDetection+0x1c>
 4ce:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <switchesActive>
 4d2:	93 98       	cbi	0x12, 3	; 18
 4d4:	8b 98       	cbi	0x11, 3	; 17
 4d6:	85 b7       	in	r24, 0x35	; 53
 4d8:	83 7f       	andi	r24, 0xF3	; 243
 4da:	85 bf       	out	0x35, r24	; 53
 4dc:	8b b7       	in	r24, 0x3b	; 59
 4de:	80 68       	ori	r24, 0x80	; 128
 4e0:	8b bf       	out	0x3b, r24	; 59
 4e2:	08 95       	ret
 4e4:	89 2b       	or	r24, r25
 4e6:	19 f4       	brne	.+6      	; 0x4ee <SwitchDetection+0x26>
 4e8:	8b b7       	in	r24, 0x3b	; 59
 4ea:	8f 77       	andi	r24, 0x7F	; 127
 4ec:	8b bf       	out	0x3b, r24	; 59
 4ee:	08 95       	ret

000004f0 <__vector_2>:
 4f0:	1f 92       	push	r1
 4f2:	0f 92       	push	r0
 4f4:	0f b6       	in	r0, 0x3f	; 63
 4f6:	0f 92       	push	r0
 4f8:	11 24       	eor	r1, r1
 4fa:	2f 93       	push	r18
 4fc:	3f 93       	push	r19
 4fe:	4f 93       	push	r20
 500:	5f 93       	push	r21
 502:	6f 93       	push	r22
 504:	7f 93       	push	r23
 506:	8f 93       	push	r24
 508:	9f 93       	push	r25
 50a:	af 93       	push	r26
 50c:	bf 93       	push	r27
 50e:	ef 93       	push	r30
 510:	ff 93       	push	r31
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <switchesActive>
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	d5 df       	rcall	.-86     	; 0x4c8 <SwitchDetection>
 51e:	ff 91       	pop	r31
 520:	ef 91       	pop	r30
 522:	bf 91       	pop	r27
 524:	af 91       	pop	r26
 526:	9f 91       	pop	r25
 528:	8f 91       	pop	r24
 52a:	7f 91       	pop	r23
 52c:	6f 91       	pop	r22
 52e:	5f 91       	pop	r21
 530:	4f 91       	pop	r20
 532:	3f 91       	pop	r19
 534:	2f 91       	pop	r18
 536:	0f 90       	pop	r0
 538:	0f be       	out	0x3f, r0	; 63
 53a:	0f 90       	pop	r0
 53c:	1f 90       	pop	r1
 53e:	18 95       	reti

00000540 <Sleep>:
 540:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <counter36kHz>
 544:	89 0f       	add	r24, r25
 546:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <counter36kHz>
 54a:	89 13       	cpse	r24, r25
 54c:	fc cf       	rjmp	.-8      	; 0x546 <Sleep+0x6>
 54e:	08 95       	ret

00000550 <Battery>:
 550:	cf 93       	push	r28
 552:	df 93       	push	r29
 554:	00 d0       	rcall	.+0      	; 0x556 <Battery+0x6>
 556:	cd b7       	in	r28, 0x3d	; 61
 558:	de b7       	in	r29, 0x3e	; 62
 55a:	13 be       	out	0x33, r1	; 51
 55c:	85 ec       	ldi	r24, 0xC5	; 197
 55e:	87 b9       	out	0x07, r24	; 7
 560:	84 e6       	ldi	r24, 0x64	; 100
 562:	ee df       	rcall	.-36     	; 0x540 <Sleep>
 564:	36 9a       	sbi	0x06, 6	; 6
 566:	34 9b       	sbis	0x06, 4	; 6
 568:	fe cf       	rjmp	.-4      	; 0x566 <Battery+0x16>
 56a:	34 9a       	sbi	0x06, 4	; 6
 56c:	24 b1       	in	r18, 0x04	; 4
 56e:	85 b1       	in	r24, 0x05	; 5
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	98 2f       	mov	r25, r24
 574:	88 27       	eor	r24, r24
 576:	82 0f       	add	r24, r18
 578:	91 1d       	adc	r25, r1
 57a:	9a 83       	std	Y+2, r25	; 0x02
 57c:	89 83       	std	Y+1, r24	; 0x01
 57e:	84 e0       	ldi	r24, 0x04	; 4
 580:	83 bf       	out	0x33, r24	; 51
 582:	89 81       	ldd	r24, Y+1	; 0x01
 584:	9a 81       	ldd	r25, Y+2	; 0x02
 586:	0f 90       	pop	r0
 588:	0f 90       	pop	r0
 58a:	df 91       	pop	r29
 58c:	cf 91       	pop	r28
 58e:	08 95       	ret

00000590 <Switches>:
 590:	cf 93       	push	r28
 592:	df 93       	push	r29
 594:	13 be       	out	0x33, r1	; 51
 596:	8b 9a       	sbi	0x11, 3	; 17
 598:	93 9a       	sbi	0x12, 3	; 18
 59a:	84 e4       	ldi	r24, 0x44	; 68
 59c:	87 b9       	out	0x07, r24	; 7
 59e:	85 e0       	ldi	r24, 0x05	; 5
 5a0:	cf df       	rcall	.-98     	; 0x540 <Sleep>
 5a2:	36 9a       	sbi	0x06, 6	; 6
 5a4:	34 9b       	sbis	0x06, 4	; 6
 5a6:	fe cf       	rjmp	.-4      	; 0x5a4 <Switches+0x14>
 5a8:	34 9a       	sbi	0x06, 4	; 6
 5aa:	d4 b1       	in	r29, 0x04	; 4
 5ac:	c5 b1       	in	r28, 0x05	; 5
 5ae:	93 98       	cbi	0x12, 3	; 18
 5b0:	8b 98       	cbi	0x11, 3	; 17
 5b2:	84 e6       	ldi	r24, 0x64	; 100
 5b4:	c5 df       	rcall	.-118    	; 0x540 <Sleep>
 5b6:	84 e0       	ldi	r24, 0x04	; 4
 5b8:	83 bf       	out	0x33, r24	; 51
 5ba:	2c 2f       	mov	r18, r28
 5bc:	30 e0       	ldi	r19, 0x00	; 0
 5be:	32 2f       	mov	r19, r18
 5c0:	22 27       	eor	r18, r18
 5c2:	2d 0f       	add	r18, r29
 5c4:	31 1d       	adc	r19, r1
 5c6:	03 2e       	mov	r0, r19
 5c8:	00 0c       	add	r0, r0
 5ca:	44 0b       	sbc	r20, r20
 5cc:	55 0b       	sbc	r21, r21
 5ce:	60 e0       	ldi	r22, 0x00	; 0
 5d0:	70 e4       	ldi	r23, 0x40	; 64
 5d2:	8c e9       	ldi	r24, 0x9C	; 156
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	40 d3       	rcall	.+1664   	; 0xc58 <__divmodsi4>
 5d8:	20 51       	subi	r18, 0x10	; 16
 5da:	37 42       	sbci	r19, 0x27	; 39
 5dc:	41 09       	sbc	r20, r1
 5de:	51 09       	sbc	r21, r1
 5e0:	af e3       	ldi	r26, 0x3F	; 63
 5e2:	b0 e0       	ldi	r27, 0x00	; 0
 5e4:	5b d3       	rcall	.+1718   	; 0xc9c <__muluhisi3>
 5e6:	68 57       	subi	r22, 0x78	; 120
 5e8:	7c 4e       	sbci	r23, 0xEC	; 236
 5ea:	8f 4f       	sbci	r24, 0xFF	; 255
 5ec:	9f 4f       	sbci	r25, 0xFF	; 255
 5ee:	20 e1       	ldi	r18, 0x10	; 16
 5f0:	37 e2       	ldi	r19, 0x27	; 39
 5f2:	40 e0       	ldi	r20, 0x00	; 0
 5f4:	50 e0       	ldi	r21, 0x00	; 0
 5f6:	30 d3       	rcall	.+1632   	; 0xc58 <__divmodsi4>
 5f8:	82 2f       	mov	r24, r18
 5fa:	df 91       	pop	r29
 5fc:	cf 91       	pop	r28
 5fe:	08 95       	ret

00000600 <Msleep>:
 600:	0f 93       	push	r16
 602:	1f 93       	push	r17
 604:	cf 93       	push	r28
 606:	df 93       	push	r29
 608:	18 16       	cp	r1, r24
 60a:	19 06       	cpc	r1, r25
 60c:	4c f4       	brge	.+18     	; 0x620 <Msleep+0x20>
 60e:	8c 01       	movw	r16, r24
 610:	c0 e0       	ldi	r28, 0x00	; 0
 612:	d0 e0       	ldi	r29, 0x00	; 0
 614:	84 e2       	ldi	r24, 0x24	; 36
 616:	94 df       	rcall	.-216    	; 0x540 <Sleep>
 618:	21 96       	adiw	r28, 0x01	; 1
 61a:	0c 17       	cp	r16, r28
 61c:	1d 07       	cpc	r17, r29
 61e:	d1 f7       	brne	.-12     	; 0x614 <Msleep+0x14>
 620:	df 91       	pop	r29
 622:	cf 91       	pop	r28
 624:	1f 91       	pop	r17
 626:	0f 91       	pop	r16
 628:	08 95       	ret

0000062a <EmergencyStop>:
 62a:	60 e0       	ldi	r22, 0x00	; 0
 62c:	70 e0       	ldi	r23, 0x00	; 0
 62e:	80 e0       	ldi	r24, 0x00	; 0
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	68 de       	rcall	.-816    	; 0x304 <MotorSpeed>
 634:	02 c0       	rjmp	.+4      	; 0x63a <EmergencyStop+0x10>
 636:	82 e0       	ldi	r24, 0x02	; 2
 638:	9c de       	rcall	.-712    	; 0x372 <StatusLED>
 63a:	aa df       	rcall	.-172    	; 0x590 <Switches>
 63c:	81 11       	cpse	r24, r1
 63e:	fb cf       	rjmp	.-10     	; 0x636 <EmergencyStop+0xc>
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	41 df       	rcall	.-382    	; 0x4c8 <SwitchDetection>
 646:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <switchesActive>
 64a:	81 11       	cpse	r24, r1
 64c:	0e c0       	rjmp	.+28     	; 0x66a <EmergencyStop+0x40>
 64e:	82 e0       	ldi	r24, 0x02	; 2
 650:	90 de       	rcall	.-736    	; 0x372 <StatusLED>
 652:	84 ef       	ldi	r24, 0xF4	; 244
 654:	91 e0       	ldi	r25, 0x01	; 1
 656:	d4 df       	rcall	.-88     	; 0x600 <Msleep>
 658:	80 e0       	ldi	r24, 0x00	; 0
 65a:	8b de       	rcall	.-746    	; 0x372 <StatusLED>
 65c:	84 ef       	ldi	r24, 0xF4	; 244
 65e:	91 e0       	ldi	r25, 0x01	; 1
 660:	cf df       	rcall	.-98     	; 0x600 <Msleep>
 662:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <switchesActive>
 666:	88 23       	and	r24, r24
 668:	91 f3       	breq	.-28     	; 0x64e <EmergencyStop+0x24>
 66a:	8a ef       	ldi	r24, 0xFA	; 250
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	c8 df       	rcall	.-112    	; 0x600 <Msleep>
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	29 cf       	rjmp	.-430    	; 0x4c8 <SwitchDetection>
 676:	08 95       	ret

00000678 <Drive>:
 678:	6f 92       	push	r6
 67a:	7f 92       	push	r7
 67c:	8f 92       	push	r8
 67e:	9f 92       	push	r9
 680:	af 92       	push	r10
 682:	bf 92       	push	r11
 684:	cf 92       	push	r12
 686:	df 92       	push	r13
 688:	ef 92       	push	r14
 68a:	ff 92       	push	r15
 68c:	0f 93       	push	r16
 68e:	1f 93       	push	r17
 690:	cf 93       	push	r28
 692:	df 93       	push	r29
 694:	4c 01       	movw	r8, r24
 696:	6b 01       	movw	r12, r22
 698:	8c ee       	ldi	r24, 0xEC	; 236
 69a:	88 16       	cp	r8, r24
 69c:	8f ef       	ldi	r24, 0xFF	; 255
 69e:	98 06       	cpc	r9, r24
 6a0:	31 f4       	brne	.+12     	; 0x6ae <Drive+0x36>
 6a2:	80 e0       	ldi	r24, 0x00	; 0
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	10 df       	rcall	.-480    	; 0x4c8 <SwitchDetection>
 6a8:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <switchesActive>
 6ac:	03 c0       	rjmp	.+6      	; 0x6b4 <Drive+0x3c>
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	0a df       	rcall	.-492    	; 0x4c8 <SwitchDetection>
 6b4:	24 e6       	ldi	r18, 0x64	; 100
 6b6:	30 e0       	ldi	r19, 0x00	; 0
 6b8:	d4 01       	movw	r26, r8
 6ba:	ea d2       	rcall	.+1492   	; 0xc90 <__usmulhisi3>
 6bc:	2e e0       	ldi	r18, 0x0E	; 14
 6be:	31 e0       	ldi	r19, 0x01	; 1
 6c0:	40 e0       	ldi	r20, 0x00	; 0
 6c2:	50 e0       	ldi	r21, 0x00	; 0
 6c4:	c9 d2       	rcall	.+1426   	; 0xc58 <__divmodsi4>
 6c6:	79 01       	movw	r14, r18
 6c8:	33 23       	and	r19, r19
 6ca:	24 f4       	brge	.+8      	; 0x6d4 <Drive+0x5c>
 6cc:	ee 24       	eor	r14, r14
 6ce:	ff 24       	eor	r15, r15
 6d0:	e2 1a       	sub	r14, r18
 6d2:	f3 0a       	sbc	r15, r19
 6d4:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <encoderLeft+0x1>
 6d8:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <encoderLeft>
 6dc:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <encoderRight+0x1>
 6e0:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <encoderRight>
 6e4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <encoderLeft>
 6e8:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <encoderLeft+0x1>
 6ec:	8e 15       	cp	r24, r14
 6ee:	9f 05       	cpc	r25, r15
 6f0:	0c f0       	brlt	.+2      	; 0x6f4 <Drive+0x7c>
 6f2:	44 c0       	rjmp	.+136    	; 0x77c <Drive+0x104>
 6f4:	86 01       	movw	r16, r12
 6f6:	e6 01       	movw	r28, r12
 6f8:	56 01       	movw	r10, r12
 6fa:	88 e2       	ldi	r24, 0x28	; 40
 6fc:	a8 1a       	sub	r10, r24
 6fe:	b1 08       	sbc	r11, r1
 700:	6c 2c       	mov	r6, r12
 702:	7d 2c       	mov	r7, r13
 704:	8e e1       	ldi	r24, 0x1E	; 30
 706:	c8 1a       	sub	r12, r24
 708:	d1 08       	sbc	r13, r1
 70a:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <encoderLeft>
 70e:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <encoderLeft+0x1>
 712:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <encoderRight>
 716:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <encoderRight+0x1>
 71a:	82 17       	cp	r24, r18
 71c:	93 07       	cpc	r25, r19
 71e:	1c f4       	brge	.+6      	; 0x726 <Drive+0xae>
 720:	e5 01       	movw	r28, r10
 722:	06 2d       	mov	r16, r6
 724:	17 2d       	mov	r17, r7
 726:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <encoderRight>
 72a:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <encoderRight+0x1>
 72e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <encoderLeft>
 732:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <encoderLeft+0x1>
 736:	82 17       	cp	r24, r18
 738:	93 07       	cpc	r25, r19
 73a:	1c f4       	brge	.+6      	; 0x742 <Drive+0xca>
 73c:	86 01       	movw	r16, r12
 73e:	c6 2d       	mov	r28, r6
 740:	d7 2d       	mov	r29, r7
 742:	99 20       	and	r9, r9
 744:	54 f4       	brge	.+20     	; 0x75a <Drive+0xe2>
 746:	66 27       	eor	r22, r22
 748:	77 27       	eor	r23, r23
 74a:	60 1b       	sub	r22, r16
 74c:	71 0b       	sbc	r23, r17
 74e:	88 27       	eor	r24, r24
 750:	99 27       	eor	r25, r25
 752:	8c 1b       	sub	r24, r28
 754:	9d 0b       	sbc	r25, r29
 756:	d6 dd       	rcall	.-1108   	; 0x304 <MotorSpeed>
 758:	03 c0       	rjmp	.+6      	; 0x760 <Drive+0xe8>
 75a:	b8 01       	movw	r22, r16
 75c:	ce 01       	movw	r24, r28
 75e:	d2 dd       	rcall	.-1116   	; 0x304 <MotorSpeed>
 760:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <switchesActive>
 764:	81 11       	cpse	r24, r1
 766:	61 df       	rcall	.-318    	; 0x62a <EmergencyStop>
 768:	8a e0       	ldi	r24, 0x0A	; 10
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	49 df       	rcall	.-366    	; 0x600 <Msleep>
 76e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <encoderLeft>
 772:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <encoderLeft+0x1>
 776:	8e 15       	cp	r24, r14
 778:	9f 05       	cpc	r25, r15
 77a:	3c f2       	brlt	.-114    	; 0x70a <Drive+0x92>
 77c:	60 e0       	ldi	r22, 0x00	; 0
 77e:	70 e0       	ldi	r23, 0x00	; 0
 780:	80 e0       	ldi	r24, 0x00	; 0
 782:	90 e0       	ldi	r25, 0x00	; 0
 784:	bf dd       	rcall	.-1154   	; 0x304 <MotorSpeed>
 786:	88 ec       	ldi	r24, 0xC8	; 200
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	3a df       	rcall	.-396    	; 0x600 <Msleep>
 78c:	df 91       	pop	r29
 78e:	cf 91       	pop	r28
 790:	1f 91       	pop	r17
 792:	0f 91       	pop	r16
 794:	ff 90       	pop	r15
 796:	ef 90       	pop	r14
 798:	df 90       	pop	r13
 79a:	cf 90       	pop	r12
 79c:	bf 90       	pop	r11
 79e:	af 90       	pop	r10
 7a0:	9f 90       	pop	r9
 7a2:	8f 90       	pop	r8
 7a4:	7f 90       	pop	r7
 7a6:	6f 90       	pop	r6
 7a8:	08 95       	ret

000007aa <Turn>:
 7aa:	8f 92       	push	r8
 7ac:	9f 92       	push	r9
 7ae:	af 92       	push	r10
 7b0:	bf 92       	push	r11
 7b2:	cf 92       	push	r12
 7b4:	df 92       	push	r13
 7b6:	ef 92       	push	r14
 7b8:	ff 92       	push	r15
 7ba:	0f 93       	push	r16
 7bc:	1f 93       	push	r17
 7be:	cf 93       	push	r28
 7c0:	df 93       	push	r29
 7c2:	4c 01       	movw	r8, r24
 7c4:	7b 01       	movw	r14, r22
 7c6:	81 e0       	ldi	r24, 0x01	; 1
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	7e de       	rcall	.-772    	; 0x4c8 <SwitchDetection>
 7cc:	d4 01       	movw	r26, r8
 7ce:	99 20       	and	r9, r9
 7d0:	24 f4       	brge	.+8      	; 0x7da <Turn+0x30>
 7d2:	aa 27       	eor	r26, r26
 7d4:	bb 27       	eor	r27, r27
 7d6:	a8 19       	sub	r26, r8
 7d8:	b9 09       	sbc	r27, r9
 7da:	21 ea       	ldi	r18, 0xA1	; 161
 7dc:	30 e0       	ldi	r19, 0x00	; 0
 7de:	58 d2       	rcall	.+1200   	; 0xc90 <__usmulhisi3>
 7e0:	20 e9       	ldi	r18, 0x90	; 144
 7e2:	31 e0       	ldi	r19, 0x01	; 1
 7e4:	40 e0       	ldi	r20, 0x00	; 0
 7e6:	50 e0       	ldi	r21, 0x00	; 0
 7e8:	37 d2       	rcall	.+1134   	; 0xc58 <__divmodsi4>
 7ea:	69 01       	movw	r12, r18
 7ec:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <encoderLeft+0x1>
 7f0:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <encoderLeft>
 7f4:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <encoderRight+0x1>
 7f8:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <encoderRight>
 7fc:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <encoderLeft>
 800:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <encoderLeft+0x1>
 804:	82 17       	cp	r24, r18
 806:	93 07       	cpc	r25, r19
 808:	0c f0       	brlt	.+2      	; 0x80c <Turn+0x62>
 80a:	40 c0       	rjmp	.+128    	; 0x88c <Turn+0xe2>
 80c:	87 01       	movw	r16, r14
 80e:	e7 01       	movw	r28, r14
 810:	57 01       	movw	r10, r14
 812:	8a e0       	ldi	r24, 0x0A	; 10
 814:	a8 1a       	sub	r10, r24
 816:	b1 08       	sbc	r11, r1
 818:	8a e0       	ldi	r24, 0x0A	; 10
 81a:	e8 0e       	add	r14, r24
 81c:	f1 1c       	adc	r15, r1
 81e:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <encoderLeft>
 822:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <encoderLeft+0x1>
 826:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <encoderRight>
 82a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <encoderRight+0x1>
 82e:	82 17       	cp	r24, r18
 830:	93 07       	cpc	r25, r19
 832:	14 f4       	brge	.+4      	; 0x838 <Turn+0x8e>
 834:	e5 01       	movw	r28, r10
 836:	87 01       	movw	r16, r14
 838:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <encoderRight>
 83c:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <encoderRight+0x1>
 840:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <encoderLeft>
 844:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <encoderLeft+0x1>
 848:	82 17       	cp	r24, r18
 84a:	93 07       	cpc	r25, r19
 84c:	14 f4       	brge	.+4      	; 0x852 <Turn+0xa8>
 84e:	e7 01       	movw	r28, r14
 850:	85 01       	movw	r16, r10
 852:	99 20       	and	r9, r9
 854:	3c f4       	brge	.+14     	; 0x864 <Turn+0xba>
 856:	b8 01       	movw	r22, r16
 858:	88 27       	eor	r24, r24
 85a:	99 27       	eor	r25, r25
 85c:	8c 1b       	sub	r24, r28
 85e:	9d 0b       	sbc	r25, r29
 860:	51 dd       	rcall	.-1374   	; 0x304 <MotorSpeed>
 862:	06 c0       	rjmp	.+12     	; 0x870 <Turn+0xc6>
 864:	66 27       	eor	r22, r22
 866:	77 27       	eor	r23, r23
 868:	60 1b       	sub	r22, r16
 86a:	71 0b       	sbc	r23, r17
 86c:	ce 01       	movw	r24, r28
 86e:	4a dd       	rcall	.-1388   	; 0x304 <MotorSpeed>
 870:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <switchesActive>
 874:	81 11       	cpse	r24, r1
 876:	d9 de       	rcall	.-590    	; 0x62a <EmergencyStop>
 878:	8a e0       	ldi	r24, 0x0A	; 10
 87a:	90 e0       	ldi	r25, 0x00	; 0
 87c:	c1 de       	rcall	.-638    	; 0x600 <Msleep>
 87e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <encoderLeft>
 882:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <encoderLeft+0x1>
 886:	8c 15       	cp	r24, r12
 888:	9d 05       	cpc	r25, r13
 88a:	4c f2       	brlt	.-110    	; 0x81e <Turn+0x74>
 88c:	60 e0       	ldi	r22, 0x00	; 0
 88e:	70 e0       	ldi	r23, 0x00	; 0
 890:	80 e0       	ldi	r24, 0x00	; 0
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	37 dd       	rcall	.-1426   	; 0x304 <MotorSpeed>
 896:	88 ec       	ldi	r24, 0xC8	; 200
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	b2 de       	rcall	.-668    	; 0x600 <Msleep>
 89c:	df 91       	pop	r29
 89e:	cf 91       	pop	r28
 8a0:	1f 91       	pop	r17
 8a2:	0f 91       	pop	r16
 8a4:	ff 90       	pop	r15
 8a6:	ef 90       	pop	r14
 8a8:	df 90       	pop	r13
 8aa:	cf 90       	pop	r12
 8ac:	bf 90       	pop	r11
 8ae:	af 90       	pop	r10
 8b0:	9f 90       	pop	r9
 8b2:	8f 90       	pop	r8
 8b4:	08 95       	ret

000008b6 <scan>:
      }
	if(switchesActive) currentState = OBSTACLE;
	if(lostLine()) currentState = SEARCHLINE;

}
void scan(){
 8b6:	8f 92       	push	r8
 8b8:	9f 92       	push	r9
 8ba:	af 92       	push	r10
 8bc:	bf 92       	push	r11
 8be:	cf 92       	push	r12
 8c0:	df 92       	push	r13
 8c2:	ef 92       	push	r14
 8c4:	ff 92       	push	r15
 8c6:	1f 93       	push	r17
 8c8:	cf 93       	push	r28
 8ca:	df 93       	push	r29
		Msleep(200);
		ticks += encoderLeft+encoderRight;
	}
	barcode_state = END;
	currentState = BLINK;*/
	MotorSpeed(85,125);
 8cc:	6d e7       	ldi	r22, 0x7D	; 125
 8ce:	70 e0       	ldi	r23, 0x00	; 0
 8d0:	85 e5       	ldi	r24, 0x55	; 85
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	17 dd       	rcall	.-1490   	; 0x304 <MotorSpeed>
	unsigned long time_out, Wstarttime;
	time_out=Wstarttime=SystemTime();
 8d6:	fa dc       	rcall	.-1548   	; 0x2cc <SystemTime>
 8d8:	6b 01       	movw	r12, r22
 8da:	7c 01       	movw	r14, r24
 8dc:	4b 01       	movw	r8, r22
 8de:	5c 01       	movw	r10, r24
	enum BarcodeState barcode_state = DARK;
 8e0:	c1 e0       	ldi	r28, 0x01	; 1
			barcodeCounter ++;
			barcode_state = BRIGHT;
		}
		else if(barcode_state == BRIGHT && lineFollowLeft < DARK_SURFACE) {
			Wstarttime = SystemTime();
			barcode_state = DARK;
 8e2:	11 e0       	ldi	r17, 0x01	; 1
			continue;
		time_out+=50;
		if(lineFollowLeft > WHITE_SURFACE && barcode_state==DARK)
		{
			barcodeCounter ++;
			barcode_state = BRIGHT;
 8e4:	d0 e0       	ldi	r29, 0x00	; 0
	currentState = BLINK;*/
	MotorSpeed(85,125);
	unsigned long time_out, Wstarttime;
	time_out=Wstarttime=SystemTime();
	enum BarcodeState barcode_state = DARK;
	while(SystemTime() - Wstarttime <= 600) {
 8e6:	2c c0       	rjmp	.+88     	; 0x940 <scan+0x8a>
		while(time_out > SystemTime())
 8e8:	f1 dc       	rcall	.-1566   	; 0x2cc <SystemTime>
 8ea:	6c 15       	cp	r22, r12
 8ec:	7d 05       	cpc	r23, r13
 8ee:	8e 05       	cpc	r24, r14
 8f0:	9f 05       	cpc	r25, r15
 8f2:	d0 f3       	brcs	.-12     	; 0x8e8 <scan+0x32>
			continue;
		time_out+=50;
 8f4:	22 e3       	ldi	r18, 0x32	; 50
 8f6:	c2 0e       	add	r12, r18
 8f8:	d1 1c       	adc	r13, r1
 8fa:	e1 1c       	adc	r14, r1
 8fc:	f1 1c       	adc	r15, r1
		if(lineFollowLeft > WHITE_SURFACE && barcode_state==DARK)
 8fe:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <lineFollowLeft>
 902:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <lineFollowLeft+0x1>
 906:	81 39       	cpi	r24, 0x91	; 145
 908:	91 40       	sbci	r25, 0x01	; 1
 90a:	6c f0       	brlt	.+26     	; 0x926 <scan+0x70>
 90c:	c1 30       	cpi	r28, 0x01	; 1
 90e:	59 f4       	brne	.+22     	; 0x926 <scan+0x70>
		{
			barcodeCounter ++;
 910:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <barcodeCounter>
 914:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <barcodeCounter+0x1>
 918:	01 96       	adiw	r24, 0x01	; 1
 91a:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <barcodeCounter+0x1>
 91e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <barcodeCounter>
			barcode_state = BRIGHT;
 922:	cd 2f       	mov	r28, r29
 924:	0d c0       	rjmp	.+26     	; 0x940 <scan+0x8a>
		}
		else if(barcode_state == BRIGHT && lineFollowLeft < DARK_SURFACE) {
 926:	c1 11       	cpse	r28, r1
 928:	0b c0       	rjmp	.+22     	; 0x940 <scan+0x8a>
 92a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <lineFollowLeft>
 92e:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <lineFollowLeft+0x1>
 932:	88 3c       	cpi	r24, 0xC8	; 200
 934:	91 05       	cpc	r25, r1
 936:	24 f4       	brge	.+8      	; 0x940 <scan+0x8a>
			Wstarttime = SystemTime();
 938:	c9 dc       	rcall	.-1646   	; 0x2cc <SystemTime>
 93a:	4b 01       	movw	r8, r22
 93c:	5c 01       	movw	r10, r24
			barcode_state = DARK;
 93e:	c1 2f       	mov	r28, r17
	currentState = BLINK;*/
	MotorSpeed(85,125);
	unsigned long time_out, Wstarttime;
	time_out=Wstarttime=SystemTime();
	enum BarcodeState barcode_state = DARK;
	while(SystemTime() - Wstarttime <= 600) {
 940:	c5 dc       	rcall	.-1654   	; 0x2cc <SystemTime>
 942:	dc 01       	movw	r26, r24
 944:	cb 01       	movw	r24, r22
 946:	88 19       	sub	r24, r8
 948:	99 09       	sbc	r25, r9
 94a:	aa 09       	sbc	r26, r10
 94c:	bb 09       	sbc	r27, r11
 94e:	89 35       	cpi	r24, 0x59	; 89
 950:	92 40       	sbci	r25, 0x02	; 2
 952:	a1 05       	cpc	r26, r1
 954:	b1 05       	cpc	r27, r1
 956:	40 f2       	brcs	.-112    	; 0x8e8 <scan+0x32>
		else if(barcode_state == BRIGHT && lineFollowLeft < DARK_SURFACE) {
			Wstarttime = SystemTime();
			barcode_state = DARK;
		}
	};
	MotorSpeed(0,0);
 958:	60 e0       	ldi	r22, 0x00	; 0
 95a:	70 e0       	ldi	r23, 0x00	; 0
 95c:	80 e0       	ldi	r24, 0x00	; 0
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	d1 dc       	rcall	.-1630   	; 0x304 <MotorSpeed>
	barcode_state = END;
	currentState = BLINK;
 962:	84 e0       	ldi	r24, 0x04	; 4
 964:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <currentState>
}
 968:	df 91       	pop	r29
 96a:	cf 91       	pop	r28
 96c:	1f 91       	pop	r17
 96e:	ff 90       	pop	r15
 970:	ef 90       	pop	r14
 972:	df 90       	pop	r13
 974:	cf 90       	pop	r12
 976:	bf 90       	pop	r11
 978:	af 90       	pop	r10
 97a:	9f 90       	pop	r9
 97c:	8f 90       	pop	r8
 97e:	08 95       	ret

00000980 <search>:
void search(){
	MotorSpeed(0,0);
 980:	60 e0       	ldi	r22, 0x00	; 0
 982:	70 e0       	ldi	r23, 0x00	; 0
 984:	80 e0       	ldi	r24, 0x00	; 0
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	bd dc       	rcall	.-1670   	; 0x304 <MotorSpeed>
	Turn(-90,100);
 98a:	64 e6       	ldi	r22, 0x64	; 100
 98c:	70 e0       	ldi	r23, 0x00	; 0
 98e:	86 ea       	ldi	r24, 0xA6	; 166
 990:	9f ef       	ldi	r25, 0xFF	; 255
 992:	0b df       	rcall	.-490    	; 0x7aa <Turn>
	if(lineFollowRight > WHITE_SURFACE || lineFollowLeft > WHITE_SURFACE)
 994:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <lineFollowRight>
 998:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <lineFollowRight+0x1>
 99c:	81 39       	cpi	r24, 0x91	; 145
 99e:	91 40       	sbci	r25, 0x01	; 1
 9a0:	3c f4       	brge	.+14     	; 0x9b0 <search+0x30>
 9a2:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <lineFollowLeft>
 9a6:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <lineFollowLeft+0x1>
 9aa:	81 39       	cpi	r24, 0x91	; 145
 9ac:	91 40       	sbci	r25, 0x01	; 1
 9ae:	1c f0       	brlt	.+6      	; 0x9b6 <search+0x36>
		currentState = LINEFOLLOW;
 9b0:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <currentState>
 9b4:	08 95       	ret
	else {
		Turn(180,100);
 9b6:	64 e6       	ldi	r22, 0x64	; 100
 9b8:	70 e0       	ldi	r23, 0x00	; 0
 9ba:	84 eb       	ldi	r24, 0xB4	; 180
 9bc:	90 e0       	ldi	r25, 0x00	; 0
 9be:	f5 de       	rcall	.-534    	; 0x7aa <Turn>
		if(lineFollowRight > WHITE_SURFACE || lineFollowLeft > WHITE_SURFACE)
 9c0:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <lineFollowRight>
 9c4:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <lineFollowRight+0x1>
 9c8:	81 39       	cpi	r24, 0x91	; 145
 9ca:	91 40       	sbci	r25, 0x01	; 1
 9cc:	3c f4       	brge	.+14     	; 0x9dc <search+0x5c>
 9ce:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <lineFollowLeft>
 9d2:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <lineFollowLeft+0x1>
 9d6:	81 39       	cpi	r24, 0x91	; 145
 9d8:	91 40       	sbci	r25, 0x01	; 1
 9da:	1c f0       	brlt	.+6      	; 0x9e2 <search+0x62>
			currentState = LINEFOLLOW;
 9dc:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <currentState>
 9e0:	08 95       	ret
		else {
			currentState = SCANBARCODE;
 9e2:	83 e0       	ldi	r24, 0x03	; 3
 9e4:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <currentState>
			Turn(-90,100);
 9e8:	64 e6       	ldi	r22, 0x64	; 100
 9ea:	70 e0       	ldi	r23, 0x00	; 0
 9ec:	86 ea       	ldi	r24, 0xA6	; 166
 9ee:	9f ef       	ldi	r25, 0xFF	; 255
 9f0:	dc ce       	rjmp	.-584    	; 0x7aa <Turn>
 9f2:	08 95       	ret

000009f4 <find>:
		}
	}
}
void find(){
	while(lineFollowLeft < DARK_SURFACE && lineFollowRight < DARK_SURFACE) {
 9f4:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <lineFollowLeft>
 9f8:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <lineFollowLeft+0x1>
 9fc:	88 3c       	cpi	r24, 0xC8	; 200
 9fe:	91 05       	cpc	r25, r1
 a00:	ec f4       	brge	.+58     	; 0xa3c <find+0x48>
 a02:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <lineFollowRight>
 a06:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <lineFollowRight+0x1>
 a0a:	88 3c       	cpi	r24, 0xC8	; 200
 a0c:	91 05       	cpc	r25, r1
 a0e:	b4 f4       	brge	.+44     	; 0xa3c <find+0x48>
		Drive(40,150);
 a10:	66 e9       	ldi	r22, 0x96	; 150
 a12:	70 e0       	ldi	r23, 0x00	; 0
 a14:	88 e2       	ldi	r24, 0x28	; 40
 a16:	90 e0       	ldi	r25, 0x00	; 0
 a18:	2f de       	rcall	.-930    	; 0x678 <Drive>
		Msleep(100);
 a1a:	84 e6       	ldi	r24, 0x64	; 100
 a1c:	90 e0       	ldi	r25, 0x00	; 0
 a1e:	f0 dd       	rcall	.-1056   	; 0x600 <Msleep>
			Turn(-90,100);
		}
	}
}
void find(){
	while(lineFollowLeft < DARK_SURFACE && lineFollowRight < DARK_SURFACE) {
 a20:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <lineFollowLeft>
 a24:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <lineFollowLeft+0x1>
 a28:	88 3c       	cpi	r24, 0xC8	; 200
 a2a:	91 05       	cpc	r25, r1
 a2c:	3c f4       	brge	.+14     	; 0xa3c <find+0x48>
 a2e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <lineFollowRight>
 a32:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <lineFollowRight+0x1>
 a36:	88 3c       	cpi	r24, 0xC8	; 200
 a38:	91 05       	cpc	r25, r1
 a3a:	54 f3       	brlt	.-44     	; 0xa10 <find+0x1c>
		Drive(40,150);
		Msleep(100);
	}
	currentState = LINEFOLLOW;
 a3c:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <currentState>
 a40:	08 95       	ret

00000a42 <blinkNTimes>:
}
void blinkNTimes(){
 a42:	cf 93       	push	r28
 a44:	df 93       	push	r29
	for(int i = 0; i < barcodeCounter; ++i)
 a46:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <barcodeCounter>
 a4a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <barcodeCounter+0x1>
 a4e:	18 16       	cp	r1, r24
 a50:	19 06       	cpc	r1, r25
 a52:	c4 f4       	brge	.+48     	; 0xa84 <blinkNTimes+0x42>
 a54:	c0 e0       	ldi	r28, 0x00	; 0
 a56:	d0 e0       	ldi	r29, 0x00	; 0
	{
		BackLEDs(ON,ON);
 a58:	61 e0       	ldi	r22, 0x01	; 1
 a5a:	81 e0       	ldi	r24, 0x01	; 1
 a5c:	a7 dc       	rcall	.-1714   	; 0x3ac <BackLEDs>
		PrintInt(i);
 a5e:	ce 01       	movw	r24, r28
 a60:	0c dd       	rcall	.-1512   	; 0x47a <PrintInt>
		Msleep(1000);
 a62:	88 ee       	ldi	r24, 0xE8	; 232
 a64:	93 e0       	ldi	r25, 0x03	; 3
 a66:	cc dd       	rcall	.-1128   	; 0x600 <Msleep>
		BackLEDs(OFF,OFF);
 a68:	60 e0       	ldi	r22, 0x00	; 0
 a6a:	80 e0       	ldi	r24, 0x00	; 0
 a6c:	9f dc       	rcall	.-1730   	; 0x3ac <BackLEDs>
		Msleep(1000);
 a6e:	88 ee       	ldi	r24, 0xE8	; 232
 a70:	93 e0       	ldi	r25, 0x03	; 3
 a72:	c6 dd       	rcall	.-1140   	; 0x600 <Msleep>
		Msleep(100);
	}
	currentState = LINEFOLLOW;
}
void blinkNTimes(){
	for(int i = 0; i < barcodeCounter; ++i)
 a74:	21 96       	adiw	r28, 0x01	; 1
 a76:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <barcodeCounter>
 a7a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <barcodeCounter+0x1>
 a7e:	c8 17       	cp	r28, r24
 a80:	d9 07       	cpc	r29, r25
 a82:	54 f3       	brlt	.-44     	; 0xa58 <blinkNTimes+0x16>
		PrintInt(i);
		Msleep(1000);
		BackLEDs(OFF,OFF);
		Msleep(1000);
	}
	if(barcodeCounter == 1)
 a84:	01 97       	sbiw	r24, 0x01	; 1
 a86:	21 f4       	brne	.+8      	; 0xa90 <blinkNTimes+0x4e>
	currentState = ENDSTATE;
 a88:	85 e0       	ldi	r24, 0x05	; 5
 a8a:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <currentState>
 a8e:	03 c0       	rjmp	.+6      	; 0xa96 <blinkNTimes+0x54>
	else
	currentState = FINDLINE;
 a90:	82 e0       	ldi	r24, 0x02	; 2
 a92:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <currentState>
	barcodeCounter = 0;
 a96:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <barcodeCounter+0x1>
 a9a:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <barcodeCounter>
}
 a9e:	df 91       	pop	r29
 aa0:	cf 91       	pop	r28
 aa2:	08 95       	ret

00000aa4 <avoidObstacle>:
void avoidObstacle(){
	Drive(-20,150);
 aa4:	66 e9       	ldi	r22, 0x96	; 150
 aa6:	70 e0       	ldi	r23, 0x00	; 0
 aa8:	8c ee       	ldi	r24, 0xEC	; 236
 aaa:	9f ef       	ldi	r25, 0xFF	; 255
 aac:	e5 dd       	rcall	.-1078   	; 0x678 <Drive>
	Turn(80,120);
 aae:	68 e7       	ldi	r22, 0x78	; 120
 ab0:	70 e0       	ldi	r23, 0x00	; 0
 ab2:	80 e5       	ldi	r24, 0x50	; 80
 ab4:	90 e0       	ldi	r25, 0x00	; 0
 ab6:	79 de       	rcall	.-782    	; 0x7aa <Turn>
	Drive(300,150);
 ab8:	66 e9       	ldi	r22, 0x96	; 150
 aba:	70 e0       	ldi	r23, 0x00	; 0
 abc:	8c e2       	ldi	r24, 0x2C	; 44
 abe:	91 e0       	ldi	r25, 0x01	; 1
 ac0:	db dd       	rcall	.-1098   	; 0x678 <Drive>
	Turn(-80,120);
 ac2:	68 e7       	ldi	r22, 0x78	; 120
 ac4:	70 e0       	ldi	r23, 0x00	; 0
 ac6:	80 eb       	ldi	r24, 0xB0	; 176
 ac8:	9f ef       	ldi	r25, 0xFF	; 255
 aca:	6f de       	rcall	.-802    	; 0x7aa <Turn>
	Drive(300,150);
 acc:	66 e9       	ldi	r22, 0x96	; 150
 ace:	70 e0       	ldi	r23, 0x00	; 0
 ad0:	8c e2       	ldi	r24, 0x2C	; 44
 ad2:	91 e0       	ldi	r25, 0x01	; 1
 ad4:	d1 dd       	rcall	.-1118   	; 0x678 <Drive>
	Turn(-80,120);
 ad6:	68 e7       	ldi	r22, 0x78	; 120
 ad8:	70 e0       	ldi	r23, 0x00	; 0
 ada:	80 eb       	ldi	r24, 0xB0	; 176
 adc:	9f ef       	ldi	r25, 0xFF	; 255
 ade:	65 de       	rcall	.-822    	; 0x7aa <Turn>
	Drive(300,150);
 ae0:	66 e9       	ldi	r22, 0x96	; 150
 ae2:	70 e0       	ldi	r23, 0x00	; 0
 ae4:	8c e2       	ldi	r24, 0x2C	; 44
 ae6:	91 e0       	ldi	r25, 0x01	; 1
 ae8:	c7 dd       	rcall	.-1138   	; 0x678 <Drive>
	Turn(80,120);
 aea:	68 e7       	ldi	r22, 0x78	; 120
 aec:	70 e0       	ldi	r23, 0x00	; 0
 aee:	80 e5       	ldi	r24, 0x50	; 80
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	5b de       	rcall	.-842    	; 0x7aa <Turn>
	currentState = LINEFOLLOW;
 af4:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <currentState>
 af8:	08 95       	ret

00000afa <lostLine>:
}

int lostLine() {
	if(!lineFollowLeft && !lineFollowRight)
 afa:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <lineFollowLeft>
 afe:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <lineFollowLeft+0x1>
 b02:	89 2b       	or	r24, r25
 b04:	31 f4       	brne	.+12     	; 0xb12 <lostLine+0x18>
 b06:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <lineFollowRight>
 b0a:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <lineFollowRight+0x1>
 b0e:	00 97       	sbiw	r24, 0x00	; 0
 b10:	91 f0       	breq	.+36     	; 0xb36 <lostLine+0x3c>
		return 0;
	if((lineFollowLeft+lineFollowRight) < 2 * DARK_SURFACE)
 b12:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <lineFollowLeft>
 b16:	30 91 6d 00 	lds	r19, 0x006D	; 0x80006d <lineFollowLeft+0x1>
 b1a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <lineFollowRight>
 b1e:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <lineFollowRight+0x1>
	currentState = LINEFOLLOW;
}

int lostLine() {
	if(!lineFollowLeft && !lineFollowRight)
		return 0;
 b22:	82 0f       	add	r24, r18
 b24:	93 1f       	adc	r25, r19
 b26:	31 e0       	ldi	r19, 0x01	; 1
 b28:	20 e0       	ldi	r18, 0x00	; 0
 b2a:	80 39       	cpi	r24, 0x90	; 144
 b2c:	91 40       	sbci	r25, 0x01	; 1
 b2e:	0c f0       	brlt	.+2      	; 0xb32 <lostLine+0x38>
 b30:	30 e0       	ldi	r19, 0x00	; 0
 b32:	83 2f       	mov	r24, r19
 b34:	92 2f       	mov	r25, r18
	if((lineFollowLeft+lineFollowRight) < 2 * DARK_SURFACE)
		return 1;
	return 0;
}
 b36:	08 95       	ret

00000b38 <follow>:
	}
	return 0;
}

void follow() {
      while (!switchesActive && !lostLine()) {
 b38:	2b c0       	rjmp	.+86     	; 0xb90 <follow+0x58>

	      if (lineFollowDelta < 0) {
 b3a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <lineFollowDelta>
 b3e:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <lineFollowDelta+0x1>
 b42:	99 23       	and	r25, r25
 b44:	9c f4       	brge	.+38     	; 0xb6c <follow+0x34>
		      if (lineFollowDelta < -90) {
 b46:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <lineFollowDelta>
 b4a:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <lineFollowDelta+0x1>
 b4e:	86 3a       	cpi	r24, 0xA6	; 166
 b50:	9f 4f       	sbci	r25, 0xFF	; 255
 b52:	34 f4       	brge	.+12     	; 0xb60 <follow+0x28>
			      MotorSpeed(100, -150);
 b54:	6a e6       	ldi	r22, 0x6A	; 106
 b56:	7f ef       	ldi	r23, 0xFF	; 255
 b58:	84 e6       	ldi	r24, 0x64	; 100
 b5a:	90 e0       	ldi	r25, 0x00	; 0
 b5c:	d3 db       	rcall	.-2138   	; 0x304 <MotorSpeed>
 b5e:	18 c0       	rjmp	.+48     	; 0xb90 <follow+0x58>
			      } else {
			      MotorSpeed(120, 100);
 b60:	64 e6       	ldi	r22, 0x64	; 100
 b62:	70 e0       	ldi	r23, 0x00	; 0
 b64:	88 e7       	ldi	r24, 0x78	; 120
 b66:	90 e0       	ldi	r25, 0x00	; 0
 b68:	cd db       	rcall	.-2150   	; 0x304 <MotorSpeed>
 b6a:	12 c0       	rjmp	.+36     	; 0xb90 <follow+0x58>
		      }
		      } else {
		      if (lineFollowDelta > 90) {
 b6c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <lineFollowDelta>
 b70:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <lineFollowDelta+0x1>
 b74:	8b 35       	cpi	r24, 0x5B	; 91
 b76:	91 05       	cpc	r25, r1
 b78:	34 f0       	brlt	.+12     	; 0xb86 <follow+0x4e>
			      MotorSpeed(-150, 100);
 b7a:	64 e6       	ldi	r22, 0x64	; 100
 b7c:	70 e0       	ldi	r23, 0x00	; 0
 b7e:	8a e6       	ldi	r24, 0x6A	; 106
 b80:	9f ef       	ldi	r25, 0xFF	; 255
 b82:	c0 db       	rcall	.-2176   	; 0x304 <MotorSpeed>
 b84:	05 c0       	rjmp	.+10     	; 0xb90 <follow+0x58>
			      } else {
			      MotorSpeed(100, 140);
 b86:	6c e8       	ldi	r22, 0x8C	; 140
 b88:	70 e0       	ldi	r23, 0x00	; 0
 b8a:	84 e6       	ldi	r24, 0x64	; 100
 b8c:	90 e0       	ldi	r25, 0x00	; 0
 b8e:	ba db       	rcall	.-2188   	; 0x304 <MotorSpeed>
	}
	return 0;
}

void follow() {
      while (!switchesActive && !lostLine()) {
 b90:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <switchesActive>
 b94:	81 11       	cpse	r24, r1
 b96:	03 c0       	rjmp	.+6      	; 0xb9e <follow+0x66>
 b98:	b0 df       	rcall	.-160    	; 0xafa <lostLine>
 b9a:	89 2b       	or	r24, r25
 b9c:	71 f2       	breq	.-100    	; 0xb3a <follow+0x2>
			      MotorSpeed(100, 140);
		      }
	      }

      }
	if(switchesActive) currentState = OBSTACLE;
 b9e:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <switchesActive>
 ba2:	88 23       	and	r24, r24
 ba4:	19 f0       	breq	.+6      	; 0xbac <follow+0x74>
 ba6:	86 e0       	ldi	r24, 0x06	; 6
 ba8:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <currentState>
	if(lostLine()) currentState = SEARCHLINE;
 bac:	a6 df       	rcall	.-180    	; 0xafa <lostLine>
 bae:	89 2b       	or	r24, r25
 bb0:	19 f0       	breq	.+6      	; 0xbb8 <follow+0x80>
 bb2:	81 e0       	ldi	r24, 0x01	; 1
 bb4:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <currentState>
 bb8:	08 95       	ret

00000bba <main>:
void MyTurn(int);
enum States currentState =LINEFOLLOW;

int main (void)
{
	Init();
 bba:	15 dc       	rcall	.-2006   	; 0x3e6 <Init>
	Msleep(2000);
 bbc:	80 ed       	ldi	r24, 0xD0	; 208
 bbe:	97 e0       	ldi	r25, 0x07	; 7
 bc0:	1f dd       	rcall	.-1474   	; 0x600 <Msleep>
	PrintInt(Battery());PrintInt(-404);
 bc2:	c6 dc       	rcall	.-1652   	; 0x550 <Battery>
 bc4:	5a dc       	rcall	.-1868   	; 0x47a <PrintInt>
 bc6:	8c e6       	ldi	r24, 0x6C	; 108
 bc8:	9e ef       	ldi	r25, 0xFE	; 254
 bca:	57 dc       	rcall	.-1874   	; 0x47a <PrintInt>
	SwitchDetection(ON);
 bcc:	81 e0       	ldi	r24, 0x01	; 1
 bce:	90 e0       	ldi	r25, 0x00	; 0
 bd0:	7b dc       	rcall	.-1802   	; 0x4c8 <SwitchDetection>
	while(currentState != ENDSTATE)
 bd2:	19 c0       	rjmp	.+50     	; 0xc06 <main+0x4c>
	{
		switch(currentState) {
 bd4:	82 30       	cpi	r24, 0x02	; 2
 bd6:	81 f0       	breq	.+32     	; 0xbf8 <main+0x3e>
 bd8:	28 f4       	brcc	.+10     	; 0xbe4 <main+0x2a>
 bda:	88 23       	and	r24, r24
 bdc:	49 f0       	breq	.+18     	; 0xbf0 <main+0x36>
 bde:	81 30       	cpi	r24, 0x01	; 1
 be0:	49 f0       	breq	.+18     	; 0xbf4 <main+0x3a>
 be2:	13 c0       	rjmp	.+38     	; 0xc0a <main+0x50>
 be4:	84 30       	cpi	r24, 0x04	; 4
 be6:	61 f0       	breq	.+24     	; 0xc00 <main+0x46>
 be8:	48 f0       	brcs	.+18     	; 0xbfc <main+0x42>
 bea:	86 30       	cpi	r24, 0x06	; 6
 bec:	59 f0       	breq	.+22     	; 0xc04 <main+0x4a>
 bee:	0d c0       	rjmp	.+26     	; 0xc0a <main+0x50>
			case LINEFOLLOW :
			follow();
 bf0:	a3 df       	rcall	.-186    	; 0xb38 <follow>
			break;
 bf2:	09 c0       	rjmp	.+18     	; 0xc06 <main+0x4c>
			case SEARCHLINE :
			search();
 bf4:	c5 de       	rcall	.-630    	; 0x980 <search>
			break;
 bf6:	07 c0       	rjmp	.+14     	; 0xc06 <main+0x4c>
			case FINDLINE :
			find();
 bf8:	fd de       	rcall	.-518    	; 0x9f4 <find>
			break;
 bfa:	05 c0       	rjmp	.+10     	; 0xc06 <main+0x4c>
			case SCANBARCODE :
			scan();
 bfc:	5c de       	rcall	.-840    	; 0x8b6 <scan>
			break;
 bfe:	03 c0       	rjmp	.+6      	; 0xc06 <main+0x4c>
			case BLINK :
			blinkNTimes();
 c00:	20 df       	rcall	.-448    	; 0xa42 <blinkNTimes>
			break;
 c02:	01 c0       	rjmp	.+2      	; 0xc06 <main+0x4c>
			case OBSTACLE :
			avoidObstacle();
 c04:	4f df       	rcall	.-354    	; 0xaa4 <avoidObstacle>
{
	Init();
	Msleep(2000);
	PrintInt(Battery());PrintInt(-404);
	SwitchDetection(ON);
	while(currentState != ENDSTATE)
 c06:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <currentState>
 c0a:	85 30       	cpi	r24, 0x05	; 5
 c0c:	19 f7       	brne	.-58     	; 0xbd4 <main+0x1a>
			default:
			break;
		}
	}
	return 0;
}
 c0e:	80 e0       	ldi	r24, 0x00	; 0
 c10:	90 e0       	ldi	r25, 0x00	; 0
 c12:	08 95       	ret

00000c14 <__udivmodsi4>:
 c14:	a1 e2       	ldi	r26, 0x21	; 33
 c16:	1a 2e       	mov	r1, r26
 c18:	aa 1b       	sub	r26, r26
 c1a:	bb 1b       	sub	r27, r27
 c1c:	fd 01       	movw	r30, r26
 c1e:	0d c0       	rjmp	.+26     	; 0xc3a <__udivmodsi4_ep>

00000c20 <__udivmodsi4_loop>:
 c20:	aa 1f       	adc	r26, r26
 c22:	bb 1f       	adc	r27, r27
 c24:	ee 1f       	adc	r30, r30
 c26:	ff 1f       	adc	r31, r31
 c28:	a2 17       	cp	r26, r18
 c2a:	b3 07       	cpc	r27, r19
 c2c:	e4 07       	cpc	r30, r20
 c2e:	f5 07       	cpc	r31, r21
 c30:	20 f0       	brcs	.+8      	; 0xc3a <__udivmodsi4_ep>
 c32:	a2 1b       	sub	r26, r18
 c34:	b3 0b       	sbc	r27, r19
 c36:	e4 0b       	sbc	r30, r20
 c38:	f5 0b       	sbc	r31, r21

00000c3a <__udivmodsi4_ep>:
 c3a:	66 1f       	adc	r22, r22
 c3c:	77 1f       	adc	r23, r23
 c3e:	88 1f       	adc	r24, r24
 c40:	99 1f       	adc	r25, r25
 c42:	1a 94       	dec	r1
 c44:	69 f7       	brne	.-38     	; 0xc20 <__udivmodsi4_loop>
 c46:	60 95       	com	r22
 c48:	70 95       	com	r23
 c4a:	80 95       	com	r24
 c4c:	90 95       	com	r25
 c4e:	9b 01       	movw	r18, r22
 c50:	ac 01       	movw	r20, r24
 c52:	bd 01       	movw	r22, r26
 c54:	cf 01       	movw	r24, r30
 c56:	08 95       	ret

00000c58 <__divmodsi4>:
 c58:	05 2e       	mov	r0, r21
 c5a:	97 fb       	bst	r25, 7
 c5c:	16 f4       	brtc	.+4      	; 0xc62 <__divmodsi4+0xa>
 c5e:	00 94       	com	r0
 c60:	0f d0       	rcall	.+30     	; 0xc80 <__negsi2>
 c62:	57 fd       	sbrc	r21, 7
 c64:	05 d0       	rcall	.+10     	; 0xc70 <__divmodsi4_neg2>
 c66:	d6 df       	rcall	.-84     	; 0xc14 <__udivmodsi4>
 c68:	07 fc       	sbrc	r0, 7
 c6a:	02 d0       	rcall	.+4      	; 0xc70 <__divmodsi4_neg2>
 c6c:	46 f4       	brtc	.+16     	; 0xc7e <__divmodsi4_exit>
 c6e:	08 c0       	rjmp	.+16     	; 0xc80 <__negsi2>

00000c70 <__divmodsi4_neg2>:
 c70:	50 95       	com	r21
 c72:	40 95       	com	r20
 c74:	30 95       	com	r19
 c76:	21 95       	neg	r18
 c78:	3f 4f       	sbci	r19, 0xFF	; 255
 c7a:	4f 4f       	sbci	r20, 0xFF	; 255
 c7c:	5f 4f       	sbci	r21, 0xFF	; 255

00000c7e <__divmodsi4_exit>:
 c7e:	08 95       	ret

00000c80 <__negsi2>:
 c80:	90 95       	com	r25
 c82:	80 95       	com	r24
 c84:	70 95       	com	r23
 c86:	61 95       	neg	r22
 c88:	7f 4f       	sbci	r23, 0xFF	; 255
 c8a:	8f 4f       	sbci	r24, 0xFF	; 255
 c8c:	9f 4f       	sbci	r25, 0xFF	; 255
 c8e:	08 95       	ret

00000c90 <__usmulhisi3>:
 c90:	0f d0       	rcall	.+30     	; 0xcb0 <__umulhisi3>

00000c92 <__usmulhisi3_tail>:
 c92:	b7 ff       	sbrs	r27, 7
 c94:	08 95       	ret
 c96:	82 1b       	sub	r24, r18
 c98:	93 0b       	sbc	r25, r19
 c9a:	08 95       	ret

00000c9c <__muluhisi3>:
 c9c:	09 d0       	rcall	.+18     	; 0xcb0 <__umulhisi3>
 c9e:	a5 9f       	mul	r26, r21
 ca0:	90 0d       	add	r25, r0
 ca2:	b4 9f       	mul	r27, r20
 ca4:	90 0d       	add	r25, r0
 ca6:	a4 9f       	mul	r26, r20
 ca8:	80 0d       	add	r24, r0
 caa:	91 1d       	adc	r25, r1
 cac:	11 24       	eor	r1, r1
 cae:	08 95       	ret

00000cb0 <__umulhisi3>:
 cb0:	a2 9f       	mul	r26, r18
 cb2:	b0 01       	movw	r22, r0
 cb4:	b3 9f       	mul	r27, r19
 cb6:	c0 01       	movw	r24, r0
 cb8:	a3 9f       	mul	r26, r19
 cba:	01 d0       	rcall	.+2      	; 0xcbe <__umulhisi3+0xe>
 cbc:	b2 9f       	mul	r27, r18
 cbe:	70 0d       	add	r23, r0
 cc0:	81 1d       	adc	r24, r1
 cc2:	11 24       	eor	r1, r1
 cc4:	91 1d       	adc	r25, r1
 cc6:	08 95       	ret

00000cc8 <__itoa_ncheck>:
 cc8:	bb 27       	eor	r27, r27
 cca:	4a 30       	cpi	r20, 0x0A	; 10
 ccc:	31 f4       	brne	.+12     	; 0xcda <__itoa_ncheck+0x12>
 cce:	99 23       	and	r25, r25
 cd0:	22 f4       	brpl	.+8      	; 0xcda <__itoa_ncheck+0x12>
 cd2:	bd e2       	ldi	r27, 0x2D	; 45
 cd4:	90 95       	com	r25
 cd6:	81 95       	neg	r24
 cd8:	9f 4f       	sbci	r25, 0xFF	; 255
 cda:	01 c0       	rjmp	.+2      	; 0xcde <__utoa_common>

00000cdc <__utoa_ncheck>:
 cdc:	bb 27       	eor	r27, r27

00000cde <__utoa_common>:
 cde:	fb 01       	movw	r30, r22
 ce0:	55 27       	eor	r21, r21
 ce2:	aa 27       	eor	r26, r26
 ce4:	88 0f       	add	r24, r24
 ce6:	99 1f       	adc	r25, r25
 ce8:	aa 1f       	adc	r26, r26
 cea:	a4 17       	cp	r26, r20
 cec:	10 f0       	brcs	.+4      	; 0xcf2 <__utoa_common+0x14>
 cee:	a4 1b       	sub	r26, r20
 cf0:	83 95       	inc	r24
 cf2:	50 51       	subi	r21, 0x10	; 16
 cf4:	b9 f7       	brne	.-18     	; 0xce4 <__utoa_common+0x6>
 cf6:	a0 5d       	subi	r26, 0xD0	; 208
 cf8:	aa 33       	cpi	r26, 0x3A	; 58
 cfa:	08 f0       	brcs	.+2      	; 0xcfe <__utoa_common+0x20>
 cfc:	a9 5d       	subi	r26, 0xD9	; 217
 cfe:	a1 93       	st	Z+, r26
 d00:	00 97       	sbiw	r24, 0x00	; 0
 d02:	79 f7       	brne	.-34     	; 0xce2 <__utoa_common+0x4>
 d04:	b1 11       	cpse	r27, r1
 d06:	b1 93       	st	Z+, r27
 d08:	11 92       	st	Z+, r1
 d0a:	cb 01       	movw	r24, r22
 d0c:	00 c0       	rjmp	.+0      	; 0xd0e <strrev>

00000d0e <strrev>:
 d0e:	dc 01       	movw	r26, r24
 d10:	fc 01       	movw	r30, r24
 d12:	67 2f       	mov	r22, r23
 d14:	71 91       	ld	r23, Z+
 d16:	77 23       	and	r23, r23
 d18:	e1 f7       	brne	.-8      	; 0xd12 <strrev+0x4>
 d1a:	32 97       	sbiw	r30, 0x02	; 2
 d1c:	04 c0       	rjmp	.+8      	; 0xd26 <strrev+0x18>
 d1e:	7c 91       	ld	r23, X
 d20:	6d 93       	st	X+, r22
 d22:	70 83       	st	Z, r23
 d24:	62 91       	ld	r22, -Z
 d26:	ae 17       	cp	r26, r30
 d28:	bf 07       	cpc	r27, r31
 d2a:	c8 f3       	brcs	.-14     	; 0xd1e <strrev+0x10>
 d2c:	08 95       	ret

00000d2e <_exit>:
 d2e:	f8 94       	cli

00000d30 <__stop_program>:
 d30:	ff cf       	rjmp	.-2      	; 0xd30 <__stop_program>
